#include "xillybus_wrapper.h"

void compute_gradients(byte image[IMAGE_HEIGHT][IMAGE_WIDTH], gradient_vote grad_vote[IMAGE_HEIGHT][IMAGE_WIDTH])
{
#pragma AP interface ap_ctrl_none port=return
	//gradient magnitude and orientation calculation
	for(int i = 0; i < IMAGE_HEIGHT; i++)
	{
		for(int j = 0; j < IMAGE_WIDTH; j++)
		{
#pragma HLS pipeline
			//calculate magnitude and binning
			byte lx, rx, uy, dy;

			if(j == 0)
				lx = 0;
			else
				lx = j - 1;

			if(j == IMAGE_WIDTH - 1)
				rx = IMAGE_WIDTH - 1;
			else
				rx = j + 1;

			if(i == 0)
				uy = 0;
			else
				uy = i - 1;

			if(i == IMAGE_HEIGHT - 1)
				dy = IMAGE_HEIGHT - 1;
			else
				dy = i + 1;

			int gradX = image[i][rx] - image[i][lx];
			int gradY = image[dy][j] - image[uy][j];

//			byte zero = 0;
//			int gradX = ((j == IMAGE_WIDTH - 1) ? zero : image[i][j + 1]) - ((j == 0) ? zero : image[i][j - 1]);
//			int gradY = ((i == IMAGE_HEIGHT - 1) ? zero : image[i + 1][j]) - ((i == 0) ? zero : image[i - 1][j]);
//
			grad_vote[i][j].magnitude = sqrt_approx((gradX < 0) ? 0 - gradX : gradX, (gradY < 0) ? 0 - gradY : gradY);
			grad_vote[i][j].bin = find_bin(gradX, gradY);
		}
	}
}

void initialize_cells(cell_histogram cells[IMAGE_HEIGHT/CELL_SIZE][IMAGE_WIDTH/CELL_SIZE])
{
#pragma AP interface ap_ctrl_none port=return
	//initialize cell_histogram buffer
	for(int i = 0; i < IMAGE_HEIGHT/CELL_SIZE; i++)
	{
		for(int j = 0; j < IMAGE_WIDTH/CELL_SIZE; j++)
		{
			for(int k = 0; k < BIN_SIZE; k++)
			{
				cells[i][j].bin[k] = 0;
			}
			cells[i][j].mag_sq = 0;
		}
	}
}

void compute_cells(gradient_vote grad_vote[IMAGE_HEIGHT][IMAGE_WIDTH], cell_histogram cells[IMAGE_HEIGHT/CELL_SIZE][IMAGE_WIDTH/CELL_SIZE])
{
#pragma AP interface ap_ctrl_none port=return

	for(short i = 0; i < IMAGE_HEIGHT; i += CELL_SIZE)
	{
		for(short j = 0; j < IMAGE_WIDTH; j += CELL_SIZE)
		{
			fixed_point bin_vote[BIN_SIZE] = {};
			fixed_point bins[BIN_SIZE] = {};

			for(short k = 0; k < BIN_SIZE; k++)
			{
				bin_vote[k] = 0;
				bins[k] = 0;
			}

			double_fixed_point mag_sq = 0;

			//calculate histogram per cell
			for(byte ii = 0; ii < CELL_SIZE; ii++)
			{
				for(byte jj = 0; jj < CELL_SIZE; jj++)
				{
#pragma HLS pipeline
					gradient_vote temp = grad_vote[i + ii][j + jj];
					bin_vote[temp.bin] += temp.magnitude;
				}
			}

			//assumes CELL_SIZE is 8, optimization
			for(int k = 0; k < BIN_SIZE; k++)
			{
#pragma HLS pipeline
				bins[k] = (bin_vote[k]>>1) + (bin_vote[(k == BIN_SIZE - 1) ? (0) : (k + 1)]>>1);
				cells[i>>3][j>>3].bin[k] = bins[k];
				mag_sq += bins[k]*bins[k];
			}

			cells[i>>3][j>>3].mag_sq = mag_sq;
		}
	}
}

//calculate w*x + b
//w = hyperplane (SVM_detector)
//b = offset
//x = block_histogram (block-normalized cell histogram)

float svm_detect(cell_histogram cells[IMAGE_HEIGHT/CELL_SIZE][IMAGE_WIDTH/CELL_SIZE])
{
#pragma AP interface ap_ctrl_none port=return
//#pragma HLS ALLOCATION instances=mul limit=2 operation
	static const fixed_point SVM_detector[SVM_DESC_SIZE] = {-0.0519519, -0.0239213, -0.037283, 0.00298626, -0.0524599, -0.0171364, 0.0184187, 0.0137307, -0.0178763, -0.0328689, -0.00322135, -0.000759213, 0.0238883, -0.0728615, -0.0107663, -0.000816444, -0.00323796, -0.0171559, -0.0181224, 0.0011074, -0.022056, 0.028733, -0.0214371, -0.0104678, 0.000639224, -0.0109251, -0.0237335, 0.0342987, 0.0325984, -0.0321671, 0.0489061, 0.04327, 0.0315261, 0.0166873, 0.00841535, 0.000582433, -0.0427058, -0.0162747, -0.00649603, 0.0355719, -0.0458148, -0.0434482, -0.0015911, -0.0206577, -0.0379564, -0.00151252, 0.0164264, -0.00531908, -0.0108553, -0.0589112, -0.000999591, 0.0118997, -0.00689629, -0.0284166, -0.028902, -0.0150423, -0.0420805, 0.0490764, 0.00838822, -0.0273375, 0.0100561, 0.00100872, -0.00514789, 0.00288325, 0.041283, -0.026383, 0.0532457, 0.0342529, -0.00655594, 0.00226419, -0.00832473, -0.0214107, -0.0350949, -0.0203274, -0.0316895, 0.0225228, -0.0429624, -0.0614698, 0.0112119, -0.00547515, -0.0163738, -0.0177532, 0.0289633, -0.0194397, -0.0109978, -0.0472109, -0.0341905, -0.00219004, -0.0226148, -0.0475218, -0.0472211, -0.0571943, -0.0446276, 0.0111308, -0.0122619, -0.0658181, -0.0228523, -0.0255864, -0.0152441, -0.0336354, -0.0342804, -0.0290891, 0.0457314, 0.0510243, -0.0192537, -0.0105203, -0.0289287, -0.0277632, -0.0447359, -0.049786, -0.0373056, 0.00385905, 0.0152491, -0.0248517, -0.0154577, -0.0289419, -0.0204049, -0.045689, -0.036458, -0.0239794, 0.00175063, 0.00463734, -0.0213356, -0.0089228, -0.0322991, -0.0402378, -0.0245898, -0.0251673, -0.00482562, -0.015659, 0.0143389, 0.00692989, -0.0250688, -0.0459037, -0.0389389, -0.0337924, -0.0329737, -0.0132953, -0.0214869, 0.000885344, -0.00787693, -0.0259941, -0.0340454, -0.0373066, -0.0308761, -0.0289061, -0.0115141, -0.0418924, -0.0114541, 0.00340552, -0.0315081, -0.0529112, -0.0494771, -0.0203403, -0.0265024, -0.0124239, -0.00020333, 0.0639974, 0.0327059, -0.0334389, -0.0313345, -0.023111, -0.0195023, -0.00229771, 0.00943294, -0.0658707, -0.0589615, 0.0178187, -0.0122999, -0.00651829, -0.0278613, -0.0458067, -0.0143505, 0.00637396, -0.0408488, -0.0391382, 0.0116112, -0.029834, 0.0106766, -0.00952263, -0.0117239, 0.000278045, 0.00966248, -0.0243405, -0.0105499, 0.0218489, -0.0310721, -0.00918839, -0.0299668, -0.0203438, 0.00128295, 0.0122765, -0.00864615, 0.0365608, 0.0679628, -0.0312512, 0.0240818, 0.014095, -0.053755, -0.0232788, 0.016045, -0.0344823, -0.0619885, 0.0293023, 0.00415949, -0.0122003, -0.0360052, -0.0380534, -0.017098, 0.0144699, 0.00771602, -0.0563512, -0.0201203, -0.00538295, 0.031206, 0.0113286, -0.0413272, -0.0171178, 0.0239108, 0.0214649, -0.0296606, 0.0132655, -0.0191439, 0.00210374, -0.0118371, -0.0114914, -0.00803974, 0.0121588, 0.0452667, 0.0616198, 0.0540849, -0.0291333, 0.0480475, 0.0509283, -0.0310748, 0.0215952, 0.0258942, -0.0293558, -0.0692408, -0.00201442, -0.0497242, -0.0351047, -0.0731594, -0.0165244, 0.0159366, 0.0174529, -0.0199424, -0.0711229, 0.02072, -0.0167401, -0.015273, -0.0302864, -0.0300212, 0.00103604, 0.00498115, 0.0498981, -0.0763303, -0.0550329, -0.00247116, 0.00499053, -0.019498, 0.0109405, 0.0290625, 0.0134436, 0.0288719, -0.0840471, -0.0299311, 0.0255754, 0.0406736, 0.0186413, 0.00325451, 0.0290952, -0.00309986, 0.0192813, -0.0377063, 0.00220406, 0.0163173, 0.00228276, -0.0291294, 0.0533641, 0.0546195, 0.00343154, 0.0957768, 0.0527507, 0.00565899, 0.008672, 0.0255724, 0.021341, 0.00980639, 0.024108, 0.00798449, 0.024792, -0.0608745, -0.0559433, -0.010607, -0.0126012, -0.0322777, -0.00519399, 0.0215114, -0.00136479, 0.0151408, -0.0562617, -0.0657691, -0.0149724, 0.00358056, -0.0288798, -0.0146306, 0.027979, -0.0213938, 0.0240488, -0.0460148, -0.0687915, 0.00124104, -0.0185517, -0.0358016, 0.0609173, 0.0479773, -0.0124152, 0.0790652, 0.0500339, -0.0270551, -0.00481469, -0.00661508, 0.00390608, -0.0198933, 0.024029, -0.021329, -0.0148112, -0.0293933, -0.0352531, -0.00511547, -0.0234918, -0.0462662, -0.0266241, 0.00249599, -0.0227115, -0.017827, -0.0445222, -0.0428585, -0.00415193, -0.017591, -0.0490309, -0.0525451, -0.0556367, -0.0421848, -0.00328509, -0.0226262, -0.0893106, -0.0292065, -0.0324261, -0.0331144, -0.024535, -0.0176225, -0.0214705, 0.0174768, 0.0391656, -0.0241794, -0.0298724, -0.0149445, -0.0208674, -0.0368572, -0.0481261, -0.0484427, -0.0300297, -0.009073, -0.0396219, -0.0143972, -0.0285753, -0.0235408, -0.0470803, -0.0308802, -0.0213207, -0.00442652, 0.00438598, -0.0404965, -0.030895, -0.0210784, -0.0315639, -0.0300096, -0.0374939, -0.0235129, -0.0413144, -0.00840205, -0.0264742, -0.0388405, -0.0351094, -0.0331866, -0.0160684, -0.0167506, -0.017785, -0.0373032, -0.00672211, -0.0248638, -0.0387264, -0.0346008, -0.034366, -0.0399687, -0.0380587, -0.0321825, -0.0831236, -0.0136271, 0.00080205, -0.0386278, -0.0480039, -0.0516537, -0.0236648, -0.0222781, -0.0241144, -0.0283058, 0.0350482, 0.0132744, -0.031582, -0.0252611, -0.0276672, -0.0350888, -0.0149694, 0.00474592, -0.0269696, -0.0230583, -0.00433715, -0.0301489, 0.0125801, -1.04972e-06, -0.053409, -0.0212618, -0.00442265, -0.0372699, -0.0449685, -0.0198589, -0.0350946, 0.00189171, -0.0288312, -0.0380001, -0.0111004, 0.0147605, -0.0657099, -0.0403018, 0.0375653, -0.0282988, 0.011638, -0.00349275, -0.00628294, -0.00809719, 0.00586285, -0.0169705, 0.0508496, 0.0775859, -0.0224426, 0.053958, 0.0551115, -0.0420637, -0.0240712, -0.00504231, -0.0445742, -0.0554262, 0.0178391, 0.00676763, 0.035535, 0.017318, -0.0349584, 0.00440388, -0.0101393, -0.0594694, -0.0625364, 0.00772192, -0.00199156, 0.0188786, -0.00446908, -0.0346073, -0.00991796, 0.0182835, 0.0149442, -0.027867, 0.00675684, -0.012988, 0.0349241, 0.0125709, 0.0358291, 0.0446018, 0.0182565, -0.00202242, 0.0427339, 0.0904356, -0.00996813, 0.0492682, 0.0688736, -0.0231798, 0.0146955, 0.00933527, -0.061982, -0.0652657, 0.048534, -0.0068924, 0.000297337, -0.0301934, 0.00289982, 0.0313318, 0.020181, -0.0474526, -0.0880906, 0.039772, 0.0107837, 0.0298873, 0.00901049, -0.0040592, 0.0246706, 0.0194654, 0.00901942, -0.0745373, -0.010659, 0.0191739, 0.0238186, -0.00556867, 0.00328838, 0.0356986, 0.0188465, 0.0644064, -0.0769796, -0.0512507, 0.0348514, 0.0364598, 0.00926592, 0.0243055, 0.0393182, -0.00585032, 0.0156764, 0.012038, 0.0232219, 0.00850405, 0.0138337, -0.00686802, 0.0556082, 0.043114, 0.00573604, 0.0281165, 0.0548425, 0.0502059, -0.00196127, 0.0257019, 0.0388394, 0.0293442, 0.0401514, 0.00380169, 0.0114387, -0.00514291, -0.0133695, -0.00304073, 0.0173298, -0.00157399, 0.00695889, 0.0165007, 0.00338821, -0.0155863, -0.0216364, -0.0144392, -0.0109628, 0.00843298, -0.0029888, 0.023852, 0.0232647, -0.0142148, 0.00506584, -0.0339405, -0.0441431, 0.00872319, 0.0103071, 0.0100186, 0.048514, 0.0189988, -0.00251284, 0.0171503, 0.0580591, 0.0232722, -0.00781379, 0.00924113, 0.0442001, 0.00179202, 0.00954868, -0.0188485, -0.0286193, -0.0045871, 0.0107015, 0.00579446, 0.00280692, -0.00742101, -0.018883, -0.0127252, -0.0132634, -0.0160275, 0.0292549, 0.0107768, -0.0136814, -0.0207801, -0.0229374, -0.0108727, -0.0242695, -0.0245241, 0.00335339, 0.0241062, -0.0347157, -0.0276761, -0.00485336, 0.00787794, -0.0106304, -0.0213757, -0.00760639, 0.0210201, 0.0477851, 0.00236044, -0.012077, -0.0155439, -0.00669695, -0.0359782, -0.0379013, -0.0339447, -0.0363261, 0.0260982, 0.00126419, -0.0263421, -0.0117787, -0.00757616, -0.0421922, -0.0380368, -0.0197238, -0.0166751, 0.0381014, 0.0239254, -0.00182307, -0.00373399, -0.0134307, 0.00106687, -0.0127677, -0.0175307, -0.0103436, 0.0164588, -0.0338506, -0.0404286, -0.0371057, -0.0256515, -0.00888781, -0.0100858, 0.00121575, 0.0351419, 0.0274258, -0.0219426, -0.00590762, -0.0349651, -0.0322326, -0.00442349, -0.0136779, -0.0219541, -0.0516077, 0.0208233, 0.0134646, -0.0294047, -0.0291269, -0.0203291, -0.00849658, -0.0240782, -0.00889115, 0.00826209, 0.0381381, 0.021884, 0.00754325, -0.0182691, -0.00278546, -0.0102572, 0.00168019, 0.00210371, 0.000288352, -0.00315343, -0.01693, -0.0240857, 0.0198159, 0.00744874, -0.0312674, -0.0189416, -0.0140469, 0.0140602, 0.0399651, -0.00851983, -0.00703829, -0.00836694, -0.0260029, 0.00344823, 0.0111681, 0.00956643, -0.0468015, -0.0265616, 0.0189953, -0.0195454, 0.0286754, 0.0213732, 0.0345531, 0.0154285, 0.00236415, 0.0275813, 0.0539462, 0.013229, 0.000511643, 0.0193672, 0.0355109, -0.00934019, 0.0162213, -0.00301592, -0.00524885, -0.0101391, 0.0019471, 0.00440686, 0.0360013, 0.0215822, -0.0151912, 0.004553, -0.0123254, -0.0102016, -0.00989055, -0.0212968, -0.00215321, 0.0209456, 0.00828961, 0.0157867, 0.0306882, 0.0121119, 0.0210555, 0.00124531, 0.00839582, -0.0107328, 0.031492, 0.0362168, 0.0347909, 0.0272629, -0.00269736, 0.0404656, 0.0565525, 0.025588, 0.00125307, 0.0472535, 0.0658472, -0.00265014, 0.0241599, 0.0226736, -0.00962172, -0.0761447, 0.0134082, 0.0227028, 0.0317107, 0.00675023, -0.00384884, 0.0346326, 0.0280567, -0.0501557, -0.0670136, 0.0658296, 0.0248304, 0.0378037, 0.000949675, 0.00622443, 0.0316582, 0.00890238, 0.0186358, -0.0806886, -0.025034, 0.0313951, 0.0362773, 0.0135801, 0.00418964, 0.0298808, 0.0312825, 0.043956, -0.0952126, -0.0630578, 0.0170917, 0.043576, 0.0203227, 0.0197796, 0.0134858, -0.00256875, -0.0285705, 0.0250978, 0.0769167, 0.00766918, 0.0204428, 0.0276229, 0.013317, 0.0195725, -0.000906608, 0.0306328, 0.0616919, 0.0562297, 0.00203277, 0.0363668, 0.0306794, 0.0161263, 0.0166637, 0.0208358, -0.0158471, -0.00650474, 0.027952, 0.00365199, 0.00998995, 0.00693985, -0.0423967, 0.00896912, 0.00765771, 0.0215794, 0.00852951, -0.00346975, 0.00367584, 0.0162425, -0.030027, 0.0361551, 0.0142701, 0.000525838, 0.0112662, 0.0301057, 0.0136552, 0.00211388, 0.00284597, 0.0265537, 0.0133086, 0.0144958, -0.0106486, -0.0134866, 0.0431988, 0.0293766, -0.00687581, 0.0137851, 0.0152361, 0.0098114, 0.00822676, 0.0138582, -0.0128154, 0.0182114, 0.0327933, 0.017582, 0.00103026, 0.000761876, -0.037092, -0.00282288, 0.000152239, 0.0220633, 0.059868, 0.00218984, -0.00124802, -0.0119141, -0.0443317, 0.00305853, -0.0209645, 0.00327203, 8.29271e-05, 0.00445999, -0.000688633, 0.0159896, -0.00220942, 0.012378, -0.0052427, -0.00710121, 0.00110515, -0.0290047, 0.0387863, 0.0311167, 0.00190459, 0.00460451, 0.00463365, -0.0181385, -0.0249248, -0.00498266, -0.0496335, -0.00857835, 0.0275866, 0.0191363, -0.00704947, -0.0097495, -0.0228712, -0.0119322, -0.000788797, -0.00616991, 0.0467267, 0.00767755, -0.00252633, 0.00370982, -0.00457988, -0.00570197, -0.0182571, 0.00984734, 0.0238288, -0.0192164, -0.042124, 0.0157197, -0.0198953, -0.01085, -0.00784205, -0.00025003, -0.00169358, 0.00514362, 0.0419612, -0.013906, -0.0118618, -0.013726, -0.0180039, 0.0104632, -0.0175312, 0.00993148, 0.000925785, 0.00863754, 0.0204637, 0.0260659, -0.0135268, 0.00937004, 0.0048094, 0.00206007, -0.00314547, 0.0337001, 0.038994, -0.0365485, -0.00496902, -0.00834662, -0.00717989, -0.00700731, 0.00126183, 0.0169792, 0.0414142, 0.0180139, -0.019334, 0.0229816, 0.0166063, 0.00116365, -0.0364094, -0.00322154, -0.0088421, -0.00747016, 0.067334, 0.021264, -0.0052083, -0.0124716, -0.0390545, 0.0252158, 0.0132982, 0.0151635, 0.0256443, 0.0279572, 0.00863191, 0.0108035, 0.0223075, 0.0304684, 0.0217853, 0.0268489, -0.0069392, 0.027934, 0.0466647, -0.0237807, -0.0149271, 0.0049385, 0.00488319, 0.000521018, 0.00935622, 0.00110534, 0.0339381, 0.00544328, -0.0194269, 0.0213004, 0.0279229, 0.0228763, -0.0246225, 0.0302101, 0.014624, 0.00943214, 0.000116445, 0.00670049, 0.013212, 0.00623818, -0.0434068, 0.021541, 0.022932, 0.00529344, 0.0648805, 0.0330874, -0.0201987, -0.00546815, 0.0141057, 0.027693, 0.0322149, 0.046951, 0.0121905, 0.0603374, 0.0516909, 0.0347573, 0.0158016, 0.0197675, 0.0117831, 0.0107324, 0.0371928, 0.0213842, -0.0163018, -0.0658757, 0.0186663, 0.0174169, 0.0336674, 0.00416156, 0.0202899, 0.0440665, 0.0148354, -0.0676609, -0.0860174, 0.0465651, 0.0333798, 0.0398933, 0.0106271, 0.0266379, 0.0378333, 0.034856, 0.0631727, -0.0535523, -0.042652, 0.0177791, 0.0416727, 0.035377, 0.00718762, 0.0290754, 0.00473865, 0.0044713, -0.0636243, -0.018411, 0.0194961, 0.0488181, 0.0278385, 0.0286593, 0.0247643, 0.00183081, 0.0149066, 0.0384983, 0.047735, 0.00841512, 0.0380377, 0.0432838, 0.0141158, 0.0334121, 0.00107163, -0.0370078, 0.0338832, 0.0846404, -0.0134481, 0.0376016, 0.0242528, -0.008884, 0.0169611, 0.0125118, -0.0319039, -0.0392303, 0.0105669, 0.0182861, 0.0242901, -0.000294294, -0.0113677, 0.0233208, 0.0149126, -0.00560169, 0.00988955, 0.0243046, -0.00699108, 0.0253733, -0.00373675, 0.0610416, 0.0263174, 0.000432085, -0.00901627, 0.0707922, 0.07926, 0.0100179, 0.0406868, 0.0812694, -0.0175985, -0.0115362, -0.0147912, -0.0554534, 0.0376816, 0.0637469, 0.00313108, 0.0278906, 0.0223721, 0.00949994, 0.0095648, 0.0121568, -0.015072, 0.0278162, 0.0307157, 0.0129906, 0.00824334, 0.00526193, -0.0193415, 0.000671556, 0.00966826, -0.00632743, 0.0234116, 0.0109394, 0.0121961, 0.0212301, 0.000110661, 0.00623523, -0.00340534, 0.00338166, -0.024273, 0.02565, 0.0330755, 0.0216789, 0.0139371, 0.0194386, -0.00871493, -0.0111191, -0.00474364, -0.0307023, 0.0323962, 0.0287901, 0.0114599, 0.0238299, 0.0237709, -0.00461701, -0.000310871, 0.0232568, -0.00896908, 0.0094807, 0.0150906, 0.0271443, 0.00786394, -0.000116723, -0.0185034, -0.00534977, 0.0148129, 0.0414412, 0.0372621, -0.0237222, 0.0183477, 0.0190707, 0.00407887, 0.00538184, 0.00160134, 0.0183312, 0.00868122, 0.0143941, -0.00338146, 0.0198969, 0.000221736, -0.00115187, 0.00501663, 0.0105767, 0.00683346, -0.0118408, 0.0397826, 0.0370893, 0.0257291, 0.00345864, -0.0201254, 0.0185141, 0.0114173, 0.0143038, 0.0301565, 0.0359173, -0.0141367, 0.00434852, -0.00191119, 0.00159325, 0.0215783, 0.0209143, 0.00828887, 0.0377099, 0.023083, -0.0403584, 0.0047579, -0.00409223, -0.014005, 0.00754891, 0.0156956, 0.0116261, 0.0114941, 0.0176399, -0.0141262, 0.0141754, 0.00619228, 0.00574292, -0.00733832, 0.0137671, 0.00773151, 0.0159293, 0.025275, 0.00218131, 0.0269126, -0.00517271, -0.0334466, 0.0698526, 0.0489084, 0.0133806, 0.0537999, 0.0616374, -0.00402355, -0.00228254, 0.0158079, 0.042755, 0.0225024, 0.0207441, 0.00510201, 0.0821236, 0.0389221, -0.0575445, -0.000763716, -0.0102571, -0.0196761, -0.00228432, 0.0327189, 0.0304337, 0.00950206, -0.049736, -0.0293885, 0.021229, 0.0142211, -0.0155078, -0.00332611, 0.0180392, -0.00448998, 0.0293331, 0.0196951, -0.00935556, 0.0159632, 0.0229592, -0.000839176, 0.0368063, 0.0437675, 0.0218667, 0.0531701, 0.0321494, 0.0172115, 0.0110582, 0.0211673, 0.0199518, 0.0285938, 0.0242798, -0.0143768, 0.0741899, 0.0446384, -0.0274122, 0.00332932, 0.0358447, 0.0332752, 0.0375528, 0.0432369, 0.0123541, -0.0582204, -0.051682, 0.0617465, 0.0272632, 0.0399985, 0.0336712, 0.0175099, 0.0368036, 0.00842217, -0.016826, -0.0425654, 0.0203826, 0.0166401, 0.026682, -0.00131419, 0.029819, 0.0301699, -0.00359318, 0.040985, -0.0566027, -0.0564165, 0.0112216, 0.0417691, 0.0369758, -0.0185582, -0.0143352, 0.00881835, -0.0808446, -0.121687, 0.00859514, -0.00700891, 0.00291629, -0.000182897, 0.0304438, 0.0304181, -0.0060839, -0.00449508, 0.0555668, 0.0568223, -0.0304883, 0.0476395, 0.0581049, -0.0157476, 0.00302799, -0.0102143, -0.0347666, 0.00311677, 0.044849, -0.0204648, 0.00246804, -0.0118124, 0.00379544, 0.0209349, 0.00445435, -0.0204811, 0.00471872, 0.0148806, -0.0252013, 0.0240269, 0.0157876, -0.00546609, 0.0171618, 0.00583566, -0.0611148, -0.0462988, 0.0271625, -0.013741, 0.00175646, -0.0151777, 0.0335954, -0.00309853, -0.0318466, -0.0414449, 0.0839273, 0.0873041, -0.00363281, 0.05128, 0.0910848, -0.0227767, -0.011521, -0.038024, -0.0824466, -0.00591619, 0.0287701, -0.0200137, 0.00403923, -0.00400072, 0.0120362, 0.00385261, -0.00426701, -0.036177, 0.0163311, 0.0134337, -0.00595638, 0.0163498, 0.0262059, -0.0192109, 0.000143134, -0.00959212, -0.0485456, -0.0428968, -0.032647, -0.011211, -0.00588161, -0.0193368, -0.0124419, -0.0181481, -0.0208499, -0.0099154, 0.0983721, 0.0393862, -0.0120507, 0.0239261, 0.0270462, -0.0109397, -0.0168331, -0.0216808, -0.0772624, 0.0252601, 0.0258696, -0.0195358, -0.0221061, -0.011941, -0.0204332, -0.0157797, -0.00241865, 0.0168739, 0.0669433, 0.00480192, -0.00207299, 0.00979348, 0.00341365, -0.013021, -0.0164711, -0.00839463, -0.0178314, 0.0264715, -0.0105862, 0.00291101, -0.00996731, -0.00860368, 0.00236114, 0.00118446, -0.00975226, 0.00817857, 0.0497691, 0.00697373, 0.00980501, -0.0103929, -0.0264787, -0.0208287, -0.0111852, 0.0046691, -0.0228955, 0.0238482, -0.000951986, -0.0024603, -0.0157164, -0.0221797, 0.027111, 0.0194616, -0.0124049, 0.0504794, 0.0921575, -0.00936029, -0.00807206, -0.0115408, -0.0146479, -0.0225004, -0.0167827, -0.00928414, 0.0249618, 0.0283305, -0.0620425, -0.0161299, -0.017497, -0.0211067, 0.0273505, 0.0128889, -0.0116526, 0.0088061, 0.017362, -0.0179064, 0.0165805, 0.00609791, 0.0108113, -0.0182468, 0.00505463, -0.00453947, -0.0328648, -0.0301648, -0.0328328, -0.00410298, 0.00114459, -0.0229317, 0.0789036, 0.0440412, -0.0110996, 0.069216, 0.080244, -0.0237834, -0.014917, 0.000331877, 0.0247084, -0.00599815, 0.0154762, -0.0160512, 0.0265418, 0.00595873, -0.0671264, -0.0275272, -0.0119434, -0.0333813, 0.0215838, 0.0204779, -0.0202252, 0.0114944, 0.0038215, -0.0302235, 0.00115135, 0.0222114, 0.0168752, -0.0114391, -0.000352555, -0.0187105, 0.00817584, -0.0415675, -0.0505395, 0.00897696, 0.0145625, -0.00114218, 0.0630184, 0.0418442, -0.0221717, 0.0419214, 0.0573776, 0.00138972, -0.0126146, 0.0241703, 0.0429213, -0.0006725, 0.00669856, -0.0320242, 0.0290911, 0.0154831, -0.0270017, -0.00598007, 0.00404805, -0.00423181, 0.0192434, 0.0288708, -0.0056234, -0.0639911, -0.0384225, 0.0572821, 0.00653944, 0.0295903, 0.0154198, 0.00700222, -0.00172712, 0.00189108, -0.00730471, -0.117825, -0.0621477, 0.0092796, -0.015009, -0.00736797, 0.0127024, -0.0117343, 0.0147029, -0.018867, -0.0692132, 0.0305791, -0.00250291, 0.0214549, 0.0507646, -0.071825, -0.0369528, -0.0156704, -0.0399631, -0.0949452, -0.00385524, -0.00644305, 0.012978, -0.0174153, 0.0219042, 0.00648363, -0.00612143, -0.00417537, 0.0266933, 0.064982, -0.0135008, 0.0254422, 0.0493501, -0.0405573, 0.00134823, -0.043013, -0.0556643, -0.00286145, 0.0505321, -0.0348489, -0.0389759, -0.0675856, 0.00127993, 0.00324622, -0.00616334, -0.0861985, -0.0462025, 0.058708, -0.0210368, 0.0112487, 0.0187464, -0.0354656, -0.00514465, -0.0328047, -0.0707021, -0.040661, 0.0281863, -0.0311806, -0.0268261, -0.0428315, -0.00444867, -0.011505, -0.0553348, -0.0316305, 0.0834403, 0.0530105, -0.0394773, 0.0110701, 0.0294135, -0.0585753, -0.0248125, -0.0515185, -0.0591634, 0.00197443, 0.0366236, -0.0308567, -0.0498199, -0.0647843, -0.0148393, -0.00500151, -0.0225833, -0.0515472, 0.000328319, 0.00347274, -0.0312901, -0.00710831, -0.00443649, -0.0285808, -0.00810895, -0.0283744, -0.0580478, -0.0205644, 0.0202601, -0.0109991, -0.0276456, -0.030541, -0.00772981, -0.0311387, -0.0383507, -0.0211269, 0.0786046, 0.0199219, -0.0337147, -0.0194735, 0.00769287, -0.0631738, -0.0377775, -0.0405861, -0.0767488, 0.02392, 0.0369559, -0.0345196, -0.0460153, -0.0629049, 0.00164368, -0.0276472, -0.0360912, -0.0292318, 0.0356432, -0.0121361, -0.0178743, -0.0184788, 0.00825625, -0.047644, -0.0316033, -0.0331716, -0.0377524, 0.00492775, -0.0149615, -0.0206014, -0.0340591, -0.0465538, -0.00418761, -0.0207311, -0.0152049, 0.00129058, 0.0378709, -0.0277954, -0.0245795, -0.021125, -0.00726474, -0.0413056, -0.033252, -0.0363975, -0.0140419, 0.00726165, -0.0503129, -0.0257597, -0.0288669, -0.0327842, -0.00895562, -0.0161142, -0.0200336, 0.0271675, 0.0607309, -0.0375031, -0.0315519, -0.0241608, -0.0177643, -0.0712268, -0.051037, -0.0475672, 0.0367053, 0.0307315, -0.079632, -0.0272993, -0.0348666, -0.0599467, -0.00332587, 0.0101447, -0.00976455, 0.0277502, 0.0181572, -0.0474762, -0.0249459, -0.00847141, -0.017846, -0.027176, -0.0149039, -0.0165605, 0.0207394, -0.0358925, -0.0790881, -0.0173291, -0.00266196, -0.0280751, 0.0203517, 0.0283651, -0.0161422, 0.0830821, 0.0925683, -0.0404456, -0.05106, -0.0125672, -0.0161824, -0.0675018, -0.0307456, -0.0282877, 0.0481529, -0.00693325, -0.0790169, -0.0374822, -0.0170782, -0.0608684, 0.010527, 0.0139714, -0.0178734, 0.0556912, -0.0417293, -0.095215, -0.00854496, -3.71581e-05, -0.00178126, -0.0269259, -0.0207603, -0.0349666, 0.0406718, -0.0344783, -0.099535, -0.0358878, -0.00507319, -0.0199596, 0.0361939, 0.0287375, -0.016379, 0.0658477, 0.0287397, -0.0195247, 0.00346231, 0.0112993, 0.0181514, -0.0459809, -0.0291721, -0.040118, 0.0770813, 0.0116663, -0.0854934, -0.0343992, 0.0079291, -0.0187466, 0.0556901, 0.0177371, 0.0174775, 0.028965, -0.0755533, -0.0213824, 0.0197701, -0.0105722, 0.0237086, -0.019283, 0.00426948, -0.00584106, -0.0132332, -0.104928, -0.0556452, -0.0122259, -0.0247548, -0.0616826};
#pragma HLS RESOURCE variable=SVM_detector core=ROM_2P_LUTRAM
	static const fixed_point offset = -0.511336;

	fixed_point result = offset;
	for(int i = 0; i < V_BLOCKS_PER_IMAGE; i++)
	{
		for(int j = 0; j < H_BLOCKS_PER_IMAGE; j++)
		{
			double_fixed_point block_normal = 0;
			fixed_point inv_sq = 0;

			//hardcoded for BLOCK_SIZE/CELL_SIZE of 2 and BIN_SIZE of 9
			block_normal += cells[i][j].mag_sq;
			block_normal += cells[i + 1][j].mag_sq;
			block_normal += cells[i][j + 1].mag_sq;
			block_normal += cells[i + 1][j + 1].mag_sq;

			inv_sq = fast_inv_sqrt(block_normal);

			for(int k = 0; k < BIN_SIZE; k++)
			{
				short SVM_index = (i*H_BLOCKS_PER_IMAGE + j)*36 + k;

				fixed_point norm_cell_a = cells[i][j].bin[k]*inv_sq;
				fixed_point norm_cell_b = cells[i+1][j].bin[k]*inv_sq;
				fixed_point norm_cell_c = cells[i][j+1].bin[k]*inv_sq;
				fixed_point norm_cell_d = cells[i+1][j+1].bin[k]*inv_sq;

				result += (SVM_detector[SVM_index])*norm_cell_a;
				result += (SVM_detector[SVM_index + 9])*norm_cell_b;
				result += (SVM_detector[SVM_index + 18])*norm_cell_c;
				result += (SVM_detector[SVM_index + 27])*norm_cell_d;
			}
		}
	}

	return result;
}

void compute_blocks(cell_histogram cells[IMAGE_HEIGHT/CELL_SIZE][IMAGE_WIDTH/CELL_SIZE], float hog[SVM_DESC_SIZE])
{
#pragma AP interface ap_ctrl_none port=return
//#pragma HLS ALLOCATION instances=mul limit=8 operation

	int hog_index = 0;
	for(int i = 0; i < V_BLOCKS_PER_IMAGE; i++)
	{
		for(int j = 0; j < H_BLOCKS_PER_IMAGE; j++)
		{
			double_fixed_point block_normal = 0;
			fixed_point inv_sq = 0;

			//hardcoded for BLOCK_SIZE/CELL_SIZE of 2 and BIN_SIZE of 9
			block_normal += cells[i][j].mag_sq;
			block_normal += cells[i + 1][j].mag_sq;
			block_normal += cells[i][j + 1].mag_sq;
			block_normal += cells[i + 1][j + 1].mag_sq;

			inv_sq = fast_inv_sqrt(block_normal);

			for(int jj = 0; jj < BLOCK_SIZE/CELL_SIZE; jj++)
			{
				for(int ii = 0; ii < BLOCK_SIZE/CELL_SIZE; ii++)
				{
#pragma HLS pipeline
					for(int k = 0; k < BIN_SIZE; k++, hog_index++)
					{
						hog[hog_index] = cells[i + ii][j + jj].bin[k]*inv_sq;
					}
				}
			}
		}
	}

}

void xillybus_wrapper(int *in, int *out)
{
#pragma AP interface ap_fifo port=in
#pragma AP interface ap_fifo port=out
#pragma AP interface ap_ctrl_none port=return

#pragma HLS dataflow
	//offset is last element in SVMDetector vector in OpenCV descriptors
	//offset is 0 if the SVMDetector vector size is exactly equal to the block descriptor size

	//memory
	float result;
	byte image[IMAGE_HEIGHT][IMAGE_WIDTH];
	cell_histogram cells[IMAGE_HEIGHT/CELL_SIZE][IMAGE_WIDTH/CELL_SIZE];
	float hog[SVM_DESC_SIZE];

	//input
	for(int i = 0; i < IMAGE_HEIGHT; i++)
	{
		for(int j = 0; j < IMAGE_WIDTH; j+=WORD_SIZE)
		{
			//input intensity data onto window array
			unsigned int temp = *in++;
			image[i][j] = ((temp)&0xff);
			image[i][j + 1] = ((temp>>8)&0xff);
			image[i][j + 2] = ((temp>>16)&0xff);
			image[i][j + 3] = ((temp>>24)&0xff);
		}
	}

	//gradient calculation
	gradient_vote grad_vote[IMAGE_HEIGHT][IMAGE_WIDTH];
	compute_gradients(image, grad_vote);

	//cell histogram computation
	compute_cells(grad_vote, cells);

#ifdef SVM
	//SVM confidence output
	result = svm_detect(cells);
	*out++ = *((int*) &result);
#endif

#ifdef HOG
	//HOG output
	compute_blocks(cells, hog);
	for(int i = 0; i < SVM_DESC_SIZE; i++)
	{
		float temp = hog[i];
		*out++ = *((int*) &temp);
	}
#endif
}
