-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_cells is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    grad_vote_magnitude_s_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    grad_vote_magnitude_s_ce0 : OUT STD_LOGIC;
    grad_vote_magnitude_s_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    grad_vote_bin_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    grad_vote_bin_V_ce0 : OUT STD_LOGIC;
    grad_vote_bin_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    cells_bin_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cells_bin_V_ce0 : OUT STD_LOGIC;
    cells_bin_V_we0 : OUT STD_LOGIC;
    cells_bin_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cells_mag_sq_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cells_mag_sq_V_ce0 : OUT STD_LOGIC;
    cells_mag_sq_V_we0 : OUT STD_LOGIC;
    cells_mag_sq_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of compute_cells is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_211 : STD_LOGIC_VECTOR (6 downto 0);
    signal t_V_reg_222 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_3_reg_233 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_8_reg_244 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_reg_257 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next7_fu_274_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next7_reg_591 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_op_assign_mid2_fu_294_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_op_assign_mid2_reg_596 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten8_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_v_v_v_fu_302_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_mid2_v_v_v_reg_603 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_mid2_v_reg_609 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond5_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_2_fu_326_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_624 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_624_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_343_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_reg_628 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal t_V_3_mid2_fu_361_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_3_mid2_reg_633 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_95_mid2_v_v_v_fu_369_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_95_mid2_v_v_v_reg_639 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal jj_V_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal jj_V_reg_655 : STD_LOGIC_VECTOR (3 downto 0);
    signal grad_vote_magnitude_3_reg_660 : STD_LOGIC_VECTOR (25 downto 0);
    signal bin_vote_V_addr_3_reg_665 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_106_fu_479_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_106_reg_670 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal cells_mag_sq_V_addr_reg_675 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond_reg_680_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_680_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_491_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_3_reg_684 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_110_fu_506_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_110_reg_689 : STD_LOGIC_VECTOR (9 downto 0);
    signal addconv_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal addconv_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_572_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_reg_709 : STD_LOGIC_VECTOR (63 downto 0);
    signal mag_sq_V_fu_578_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal j_fu_583_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal bin_vote_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bin_vote_V_ce0 : STD_LOGIC;
    signal bin_vote_V_we0 : STD_LOGIC;
    signal bin_vote_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bin_vote_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bin_vote_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bin_vote_V_ce1 : STD_LOGIC;
    signal bin_vote_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten6_reg_167 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_op_assign_1_reg_178 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_op_assign_reg_189 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_200 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_215_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_t_V_phi_fu_226_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_t_V_3_phi_fu_237_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_k1_phi_fu_261_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_83_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_cast_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_88_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_90_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_94_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_116_cast_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_fu_286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_280_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_107_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_V_fu_349_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_95_mid2_v_v_fu_377_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_95_mid2_v_fu_380_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_108_fu_385_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_cast_fu_397_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_fu_400_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_87_cast_fu_405_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_114_cast_fu_393_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_109_fu_409_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_43_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_fu_441_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_450_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_105_fu_466_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_475_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_110_cast_fu_462_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_90_cast_fu_502_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_92_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_517_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_91_fu_534_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_95_fu_548_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_9_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_33_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_572_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP1_V_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component compute_cells_binbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    bin_vote_V_U : component compute_cells_binbkb
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bin_vote_V_address0,
        ce0 => bin_vote_V_ce0,
        we0 => bin_vote_V_we0,
        d0 => bin_vote_V_d0,
        q0 => bin_vote_V_q0,
        address1 => bin_vote_V_address1,
        ce1 => bin_vote_V_ce1,
        q1 => bin_vote_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_flatten8_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond5_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((exitcond5_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_op_assign_1_reg_178 <= tmp_mid2_v_v_v_reg_603;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_op_assign_1_reg_178 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_op_assign_reg_189 <= j_fu_583_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_op_assign_reg_189 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten6_reg_167 <= indvar_flatten_next7_reg_591;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten6_reg_167 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvar_flatten_reg_211 <= ap_const_lv7_0;
            elsif (((exitcond_flatten_reg_624 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_211 <= indvar_flatten_next_reg_628;
            end if; 
        end if;
    end process;

    k1_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_680 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                k1_reg_257 <= k_3_reg_684;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k1_reg_257 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_200 <= ap_const_lv4_0;
            elsif (((exitcond5_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_200 <= k_2_fu_326_p2;
            end if; 
        end if;
    end process;

    p_Val2_8_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_680_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                p_Val2_8_reg_244 <= mag_sq_V_fu_578_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_Val2_8_reg_244 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    t_V_3_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_3_reg_233 <= ap_const_lv4_0;
            elsif (((exitcond_flatten_reg_624 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_3_reg_233 <= jj_V_reg_655;
            end if; 
        end if;
    end process;

    t_V_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_reg_222 <= ap_const_lv4_0;
            elsif (((exitcond_flatten_reg_624 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_reg_222 <= tmp_95_mid2_v_v_v_reg_639;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_680 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                addconv_reg_704 <= addconv_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_624 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bin_vote_V_addr_3_reg_665 <= tmp_88_fu_426_p1(4 - 1 downto 0);
                grad_vote_magnitude_3_reg_660 <= grad_vote_magnitude_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                cells_mag_sq_V_addr_reg_675 <= tmp_s_fu_457_p1(6 - 1 downto 0);
                tmp_106_reg_670 <= tmp_106_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_624 <= exitcond_flatten_fu_337_p2;
                exitcond_flatten_reg_624_pp0_iter1_reg <= exitcond_flatten_reg_624;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond_reg_680 <= exitcond_fu_485_p2;
                exitcond_reg_680_pp1_iter1_reg <= exitcond_reg_680;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                exitcond_reg_680_pp1_iter2_reg <= exitcond_reg_680_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_op_assign_mid2_reg_596 <= i_op_assign_mid2_fu_294_p3;
                tmp_mid2_v_reg_609 <= tmp_mid2_v_v_v_fu_302_p3(5 downto 3);
                tmp_mid2_v_v_v_reg_603 <= tmp_mid2_v_v_v_fu_302_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvar_flatten_next7_reg_591 <= indvar_flatten_next7_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next_reg_628 <= indvar_flatten_next_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_624 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                jj_V_reg_655 <= jj_V_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                k_3_reg_684 <= k_3_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_680_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                p_Val2_1_reg_709 <= p_Val2_1_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                t_V_3_mid2_reg_633 <= t_V_3_mid2_fu_361_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_110_reg_689 <= tmp_110_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_95_mid2_v_v_v_reg_639 <= tmp_95_mid2_v_v_v_fu_369_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_flatten8_fu_268_p2, exitcond5_fu_320_p2, ap_CS_fsm_state3, exitcond_flatten_fu_337_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, exitcond_fu_485_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_flatten8_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond5_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_337_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond_flatten_fu_337_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_fu_485_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_fu_485_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
        OP1_V_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(addconv_reg_704),64));

    addconv_fu_562_p2 <= std_logic_vector(signed(p_Val2_9_fu_558_p1) + signed(p_Val2_s_33_fu_544_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_flatten_fu_337_p2)
    begin
        if ((exitcond_flatten_fu_337_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(exitcond_fu_485_p2)
    begin
        if ((exitcond_fu_485_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond_flatten8_fu_268_p2)
    begin
        if (((exitcond_flatten8_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_215_p4_assign_proc : process(indvar_flatten_reg_211, exitcond_flatten_reg_624, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_628, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_624 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_215_p4 <= indvar_flatten_next_reg_628;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_215_p4 <= indvar_flatten_reg_211;
        end if; 
    end process;


    ap_phi_mux_k1_phi_fu_261_p4_assign_proc : process(k1_reg_257, exitcond_reg_680, ap_CS_fsm_pp1_stage0, k_3_reg_684, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((exitcond_reg_680 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_k1_phi_fu_261_p4 <= k_3_reg_684;
        else 
            ap_phi_mux_k1_phi_fu_261_p4 <= k1_reg_257;
        end if; 
    end process;


    ap_phi_mux_t_V_3_phi_fu_237_p4_assign_proc : process(t_V_3_reg_233, exitcond_flatten_reg_624, ap_CS_fsm_pp0_stage0, jj_V_reg_655, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_624 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_t_V_3_phi_fu_237_p4 <= jj_V_reg_655;
        else 
            ap_phi_mux_t_V_3_phi_fu_237_p4 <= t_V_3_reg_233;
        end if; 
    end process;


    ap_phi_mux_t_V_phi_fu_226_p4_assign_proc : process(t_V_reg_222, exitcond_flatten_reg_624, ap_CS_fsm_pp0_stage0, tmp_95_mid2_v_v_v_reg_639, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_624 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_t_V_phi_fu_226_p4 <= tmp_95_mid2_v_v_v_reg_639;
        else 
            ap_phi_mux_t_V_phi_fu_226_p4 <= t_V_reg_222;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten8_fu_268_p2)
    begin
        if (((exitcond_flatten8_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bin_vote_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, bin_vote_V_addr_3_reg_665, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, tmp_83_fu_332_p1, ap_block_pp0_stage1, tmp_88_fu_426_p1, tmp_90_fu_497_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            bin_vote_V_address0 <= tmp_90_fu_497_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bin_vote_V_address0 <= bin_vote_V_addr_3_reg_665;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            bin_vote_V_address0 <= tmp_88_fu_426_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bin_vote_V_address0 <= tmp_83_fu_332_p1(4 - 1 downto 0);
        else 
            bin_vote_V_address0 <= "XXXX";
        end if; 
    end process;

    bin_vote_V_address1 <= tmp_94_fu_525_p1(4 - 1 downto 0);

    bin_vote_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            bin_vote_V_ce0 <= ap_const_logic_1;
        else 
            bin_vote_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bin_vote_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bin_vote_V_ce1 <= ap_const_logic_1;
        else 
            bin_vote_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bin_vote_V_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, p_Val2_s_fu_434_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bin_vote_V_d0 <= p_Val2_s_fu_434_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bin_vote_V_d0 <= ap_const_lv32_0;
        else 
            bin_vote_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bin_vote_V_we0_assign_proc : process(exitcond5_fu_320_p2, ap_CS_fsm_state3, exitcond_flatten_reg_624_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((exitcond5_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((exitcond_flatten_reg_624_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            bin_vote_V_we0 <= ap_const_logic_1;
        else 
            bin_vote_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cells_bin_V_address0 <= tmp_116_cast_fu_530_p1(10 - 1 downto 0);

    cells_bin_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            cells_bin_V_ce0 <= ap_const_logic_1;
        else 
            cells_bin_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cells_bin_V_d0 <= std_logic_vector(signed(p_Val2_9_fu_558_p1) + signed(p_Val2_s_33_fu_544_p1));

    cells_bin_V_we0_assign_proc : process(exitcond_reg_680, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((exitcond_reg_680 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            cells_bin_V_we0 <= ap_const_logic_1;
        else 
            cells_bin_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cells_mag_sq_V_address0 <= cells_mag_sq_V_addr_reg_675;

    cells_mag_sq_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            cells_mag_sq_V_ce0 <= ap_const_logic_1;
        else 
            cells_mag_sq_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cells_mag_sq_V_d0 <= p_Val2_8_reg_244;

    cells_mag_sq_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            cells_mag_sq_V_we0 <= ap_const_logic_1;
        else 
            cells_mag_sq_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_fu_320_p2 <= "1" when (k_reg_200 = ap_const_lv4_9) else "0";
    exitcond_flatten8_fu_268_p2 <= "1" when (indvar_flatten6_reg_167 = ap_const_lv7_40) else "0";
    exitcond_flatten_fu_337_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_215_p4 = ap_const_lv7_40) else "0";
    exitcond_fu_485_p2 <= "1" when (ap_phi_mux_k1_phi_fu_261_p4 = ap_const_lv4_9) else "0";
    grad_vote_bin_V_address0 <= tmp_115_cast_fu_415_p1(12 - 1 downto 0);

    grad_vote_bin_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            grad_vote_bin_V_ce0 <= ap_const_logic_1;
        else 
            grad_vote_bin_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grad_vote_magnitude_s_address0 <= tmp_115_cast_fu_415_p1(12 - 1 downto 0);

    grad_vote_magnitude_s_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            grad_vote_magnitude_s_ce0 <= ap_const_logic_1;
        else 
            grad_vote_magnitude_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_280_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_178) + unsigned(ap_const_lv7_8));
    i_op_assign_mid2_fu_294_p3 <= 
        ap_const_lv7_0 when (tmp_117_fu_286_p3(0) = '1') else 
        i_op_assign_reg_189;
    ii_V_fu_349_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_phi_fu_226_p4) + unsigned(ap_const_lv4_1));
    indvar_flatten_next7_fu_274_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_167) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_343_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_215_p4) + unsigned(ap_const_lv7_1));
    j_fu_583_p2 <= std_logic_vector(unsigned(i_op_assign_mid2_reg_596) + unsigned(ap_const_lv7_8));
    jj_V_fu_421_p2 <= std_logic_vector(unsigned(t_V_3_mid2_reg_633) + unsigned(ap_const_lv4_1));
    k_2_fu_326_p2 <= std_logic_vector(unsigned(k_reg_200) + unsigned(ap_const_lv4_1));
    k_3_fu_491_p2 <= std_logic_vector(unsigned(ap_phi_mux_k1_phi_fu_261_p4) + unsigned(ap_const_lv4_1));
    mag_sq_V_fu_578_p2 <= std_logic_vector(unsigned(p_Val2_8_reg_244) + unsigned(p_Val2_1_reg_709));
    p_Val2_1_fu_572_p0 <= OP1_V_fu_569_p1(32 - 1 downto 0);
    p_Val2_1_fu_572_p1 <= OP1_V_fu_569_p1(32 - 1 downto 0);
    p_Val2_1_fu_572_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_572_p0) * signed(p_Val2_1_fu_572_p1))), 64));
        p_Val2_43_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grad_vote_magnitude_3_reg_660),32));

        p_Val2_9_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_95_fu_548_p4),32));

        p_Val2_s_33_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_91_fu_534_p4),32));

    p_Val2_s_fu_434_p2 <= std_logic_vector(signed(p_Val2_43_fu_431_p1) + signed(bin_vote_V_q0));
    p_shl_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_466_p4),10));
    r_V_fu_400_p2 <= std_logic_vector(unsigned(i_op_assign_mid2_reg_596) + unsigned(rhs_V_cast_fu_397_p1));
    rhs_V_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_3_mid2_reg_633),7));
    t_V_3_mid2_fu_361_p3 <= 
        ap_const_lv4_0 when (tmp_107_fu_355_p2(0) = '1') else 
        ap_phi_mux_t_V_3_phi_fu_237_p4;
    tmp_105_fu_466_p4 <= ((tmp_mid2_v_reg_609 & tmp_85_fu_441_p4) & ap_const_lv3_0);
    tmp_106_fu_479_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_475_p1) + unsigned(tmp_110_cast_fu_462_p1));
    tmp_107_fu_355_p2 <= "1" when (ap_phi_mux_t_V_3_phi_fu_237_p4 = ap_const_lv4_8) else "0";
    tmp_108_fu_385_p3 <= (tmp_95_mid2_v_fu_380_p2 & ap_const_lv6_0);
    tmp_109_fu_409_p2 <= std_logic_vector(unsigned(tmp_87_cast_fu_405_p1) + unsigned(tmp_114_cast_fu_393_p1));
    tmp_110_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_450_p3),10));
    tmp_110_fu_506_p2 <= std_logic_vector(unsigned(tmp_106_reg_670) + unsigned(tmp_90_cast_fu_502_p1));
    tmp_114_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_108_fu_385_p3),14));
    tmp_115_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_fu_409_p2),64));
    tmp_116_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_110_reg_689),64));
    tmp_117_fu_286_p3 <= i_op_assign_reg_189(6 downto 6);
    tmp_83_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_200),64));
    tmp_85_fu_441_p4 <= i_op_assign_mid2_reg_596(5 downto 3);
    tmp_87_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_400_p2),14));
    tmp_88_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grad_vote_bin_V_q0),64));
    tmp_90_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k1_phi_fu_261_p4),10));
    tmp_90_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k1_phi_fu_261_p4),64));
    tmp_91_fu_534_p4 <= bin_vote_V_q0(31 downto 1);
    tmp_92_fu_511_p2 <= "1" when (ap_phi_mux_k1_phi_fu_261_p4 = ap_const_lv4_8) else "0";
    tmp_93_fu_517_p3 <= 
        ap_const_lv4_0 when (tmp_92_fu_511_p2(0) = '1') else 
        k_3_fu_491_p2;
    tmp_94_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_517_p3),64));
    tmp_95_fu_548_p4 <= bin_vote_V_q1(31 downto 1);
    tmp_95_mid2_v_fu_380_p2 <= std_logic_vector(unsigned(tmp_mid2_v_v_v_reg_603) + unsigned(tmp_95_mid2_v_v_fu_377_p1));
    tmp_95_mid2_v_v_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_mid2_v_v_v_reg_639),7));
    tmp_95_mid2_v_v_v_fu_369_p3 <= 
        ii_V_fu_349_p2 when (tmp_107_fu_355_p2(0) = '1') else 
        ap_phi_mux_t_V_phi_fu_226_p4;
    tmp_fu_450_p3 <= (tmp_mid2_v_reg_609 & tmp_85_fu_441_p4);
    tmp_mid2_v_v_v_fu_302_p3 <= 
        i_fu_280_p2 when (tmp_117_fu_286_p3(0) = '1') else 
        i_op_assign_1_reg_178;
    tmp_s_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_450_p3),64));
end behav;
