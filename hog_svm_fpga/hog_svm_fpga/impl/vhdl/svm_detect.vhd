-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity svm_detect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cells_bin_V_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cells_bin_V_2_ap_vld : OUT STD_LOGIC;
    cells_bin_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cells_bin_V_ce0 : OUT STD_LOGIC;
    cells_bin_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cells_bin_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cells_bin_V_ce1 : OUT STD_LOGIC;
    cells_bin_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    cells_mag_sq_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cells_mag_sq_V_ce0 : OUT STD_LOGIC;
    cells_mag_sq_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    cells_mag_sq_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cells_mag_sq_V_ce1 : OUT STD_LOGIC;
    cells_mag_sq_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of svm_detect is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_FFFF7D19 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110111110100011001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_40400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_9E : STD_LOGIC_VECTOR (7 downto 0) := "10011110";
    constant ap_const_lv32_5F3759DF : STD_LOGIC_VECTOR (31 downto 0) := "01011111001101110101100111011111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv17_9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv17_12 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010010";
    constant ap_const_lv17_1B : STD_LOGIC_VECTOR (16 downto 0) := "00000000000011011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_8E : STD_LOGIC_VECTOR (7 downto 0) := "10001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SVM_detector_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal SVM_detector_V_ce0 : STD_LOGIC;
    signal SVM_detector_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal SVM_detector_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal SVM_detector_V_ce1 : STD_LOGIC;
    signal SVM_detector_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_357 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal reg_361 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_fu_385_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1624 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_5_fu_403_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_reg_1633 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond2_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_1_reg_1644 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1650 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_432_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_1658 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_438_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_reg_1667 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_451_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_reg_1677 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_18_reg_1687 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_463_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_reg_1692 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_39_fu_475_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_39_reg_1702 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp1_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_reg_1712 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_23_fu_497_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_23_reg_1717 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal is_neg_reg_1724 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_1730 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_12_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1735 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_Val2_31_fu_520_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_31_reg_1741 : STD_LOGIC_VECTOR (63 downto 0);
    signal num_zeros_1_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_1_reg_1747 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_547_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_reg_1752 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp32_V_7_fu_610_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_7_reg_1757 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp32_V_12_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_12_reg_1762 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_19_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1767 : STD_LOGIC_VECTOR (0 downto 0);
    signal yn_fu_694_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal yn_reg_1772 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal x_fu_705_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_1778 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1783 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal isneg_reg_1788 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal exp_tmp_V_reg_1794 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_95_fu_738_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_95_reg_1799 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_27_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_1804 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_758_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_2_reg_1810 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal man_V_1_fu_762_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_reg_1815 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_28_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1820 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_792_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1826 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_1832 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_1838 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_2_fu_822_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1843 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal sh_amt_cast_fu_827_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_cast_reg_1848 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_1853 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1858 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1863 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_942_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_78_reg_1868 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_967_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_reg_1873 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_18_fu_989_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_reg_1878 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_fu_1011_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_reg_1883 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_fu_1032_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_reg_1888 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_fu_1092_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_42_reg_1893 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_77_cast_cast_fu_1108_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_77_cast_cast_reg_1898 : STD_LOGIC_VECTOR (9 downto 0);
    signal OP2_V_cast_fu_1112_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal OP2_V_cast_reg_1903 : STD_LOGIC_VECTOR (62 downto 0);
    signal k_1_fu_1122_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_1914 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal SVM_index_fu_1141_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal SVM_index_reg_1919 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_1166_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_83_reg_1934 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_84_fu_1171_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_84_reg_1939 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_cast_fu_1192_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_72_cast_reg_1959 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_47_reg_1970 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_reg_1975 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_reg_1990 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_reg_1995 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_1310_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_6_reg_2000 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_9_fu_1323_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_9_reg_2005 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_8_fu_1399_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_8_reg_2010 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_86_reg_2015 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_1422_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_4_reg_2020 : STD_LOGIC_VECTOR (44 downto 0);
    signal result_V_reg_2025 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_s_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_2031 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp32_V_1_fu_1533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_1_reg_2036 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1539_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_2041 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp32_V_fu_1543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_reg_2046 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_1_fu_1557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_2051 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_292 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal j_reg_304 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_316 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_8_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_cast_fu_1151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_cast_fu_1161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_cast_fu_1179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_cast_fu_1183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_1187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_1202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_1260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_332_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_336_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal p_shl_fu_391_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_399_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast_fu_375_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_fu_492_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_525_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_535_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal msb_idx_fu_551_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_556_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp32_V_5_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_587_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_67_fu_591_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_72_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_fu_601_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_3_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_6_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_24_fu_622_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_643_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_4_trunc_fu_646_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_652_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_1_fu_659_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_670_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_48_fu_680_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_op_fu_684_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_3_fu_701_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_assign_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_93_fu_716_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_26_fu_751_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_25_fu_748_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_768_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_780_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_fu_786_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_97_fu_806_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_fu_835_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sel_tmp1_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_839_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_76_fu_922_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_77_fu_932_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_953_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_963_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_cast_fu_950_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_976_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_985_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_cast_fu_973_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_fu_998_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_1007_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_cast_fu_995_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_44_fu_1020_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_1028_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_cast_fu_1017_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_96_fu_1038_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_1041_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_1046_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_74_fu_1056_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_75_fu_1063_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_79_fu_1070_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_55_cast_fu_1083_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_41_fu_1087_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_1100_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_80_fu_1076_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_89_cast_cast_fu_1128_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_1132_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp29_cast_fu_1137_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_81_fu_1146_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_82_fu_1156_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal SVM_index_cast_fu_1176_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_58_fu_1196_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_1_fu_1211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_1211_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_1_fu_1211_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_2_fu_1230_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_1230_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_2_fu_1230_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_63_fu_1245_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_68_fu_1255_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_3_fu_1269_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_1269_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_3_fu_1269_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_5_fu_1288_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_1288_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_5_fu_1288_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_6_fu_1310_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_1310_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_9_fu_1323_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_fu_1323_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_55_fu_1335_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_6_cast_fu_1332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_1347_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_69_cast_fu_1343_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_34_fu_1351_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_85_fu_1360_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_1370_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_9_cast_fu_1357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_1382_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_76_cast_fu_1378_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_8_fu_1399_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_fu_1399_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_35_fu_1386_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_4_fu_1422_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_1422_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_65_fu_1431_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_10_cast_fu_1428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_1442_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_82_cast_fu_1438_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_36_fu_1446_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_87_fu_1455_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_1465_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_11_cast_fu_1452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_fu_1477_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_88_cast_fu_1473_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_37_fu_1481_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_38_fu_1510_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_1515_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_fu_1525_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_1547_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_1563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_1568_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_trunc_fu_1571_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_1577_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_5_fu_1584_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_1595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);

    component xillybus_wrapper_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component xillybus_wrapper_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component xillybus_wrapper_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component xillybus_wrapper_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svm_detect_SVM_decud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    SVM_detector_V_U : component svm_detect_SVM_decud
    generic map (
        DataWidth => 14,
        AddressRange => 1764,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SVM_detector_V_address0,
        ce0 => SVM_detector_V_ce0,
        q0 => SVM_detector_V_q0,
        address1 => SVM_detector_V_address1,
        ce1 => SVM_detector_V_ce1,
        q1 => SVM_detector_V_q1);

    xillybus_wrapper_dEe_U11 : component xillybus_wrapper_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_40400000,
        din1 => reg_342,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p2);

    xillybus_wrapper_eOg_U12 : component xillybus_wrapper_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_332_p0,
        din1 => grp_fu_332_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    xillybus_wrapper_fYi_U13 : component xillybus_wrapper_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_336_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p1);

    xillybus_wrapper_g8j_U14 : component xillybus_wrapper_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => reg_342,
        dout => d_assign_fu_339_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_426_p2 = ap_const_lv1_1))) then 
                i_reg_292 <= i_1_reg_1624;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_292 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond_fu_1116_p2 = ap_const_lv1_1))) then 
                j_reg_304 <= j_1_reg_1658;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_379_p2 = ap_const_lv1_0))) then 
                j_reg_304 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                k_reg_316 <= k_1_reg_1914;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                k_reg_316 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_Val2_7_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                p_Val2_7_fu_164 <= result_V_reg_2025;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_7_fu_164 <= ap_const_lv32_FFFF7D19;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                p_Val2_s_fu_160 <= result_V_reg_2025;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_fu_160 <= ap_const_lv32_FFFF7D19;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                OP2_V_cast_reg_1903 <= OP2_V_cast_fu_1112_p1;
                tmp_10_reg_1873 <= tmp_10_fu_967_p2;
                tmp_18_reg_1878 <= tmp_18_fu_989_p2;
                tmp_37_reg_1883 <= tmp_37_fu_1011_p2;
                    tmp_42_reg_1893(11 downto 5) <= tmp_42_fu_1092_p3(11 downto 5);
                tmp_45_reg_1888 <= tmp_45_fu_1032_p2;
                    tmp_77_cast_cast_reg_1898(9 downto 2) <= tmp_77_cast_cast_fu_1108_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond_fu_1116_p2 = ap_const_lv1_0))) then
                SVM_index_reg_1919 <= SVM_index_fu_1141_p2;
                tmp_83_reg_1934 <= tmp_83_fu_1166_p2;
                tmp_84_reg_1939 <= tmp_84_fu_1171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                exp_tmp_V_reg_1794 <= ireg_V_fu_712_p1(62 downto 52);
                isneg_reg_1788 <= ireg_V_fu_712_p1(63 downto 63);
                tmp_27_reg_1804 <= tmp_27_fu_742_p2;
                tmp_95_reg_1799 <= tmp_95_fu_738_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_1624 <= i_1_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                icmp1_reg_1838 <= icmp1_fu_816_p2;
                    p_Result_2_reg_1810(51 downto 0) <= p_Result_2_fu_758_p1(51 downto 0);
                sh_amt_reg_1826 <= sh_amt_fu_792_p3;
                tmp_28_reg_1820 <= tmp_28_fu_774_p2;
                tmp_31_reg_1832 <= tmp_31_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_379_p2 = ap_const_lv1_1))) then
                is_neg_1_reg_1644 <= p_Val2_s_fu_160(31 downto 31);
                tmp_7_reg_1650 <= tmp_7_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                is_neg_reg_1724 <= p_Val2_23_fu_497_p2(63 downto 63);
                p_Val2_23_reg_1717 <= p_Val2_23_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_1658 <= j_1_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                k_1_reg_1914 <= k_1_fu_1122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (isneg_reg_1788 = ap_const_lv1_1))) then
                man_V_1_reg_1815 <= man_V_1_fu_762_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                man_V_2_reg_1843 <= man_V_2_fu_822_p3;
                or_cond2_reg_1863 <= or_cond2_fu_916_p2;
                or_cond_reg_1858 <= or_cond_fu_904_p2;
                sel_tmp5_reg_1853 <= sel_tmp5_fu_899_p2;
                sh_amt_cast_reg_1848 <= sh_amt_cast_fu_827_p1;
                tmp_78_reg_1868 <= tmp_78_fu_942_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                num_zeros_1_reg_1747 <= num_zeros_1_fu_543_p1;
                p_Val2_31_reg_1741 <= p_Val2_31_fu_520_p3;
                tmp_12_reg_1735 <= tmp_12_fu_515_p2;
                tmp_50_reg_1752 <= tmp_50_fu_547_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Val2_18_reg_1687 <= cells_mag_sq_V_q0;
                tmp_11_reg_1677 <= tmp_11_fu_451_p3;
                tmp_23_reg_1692 <= tmp_23_fu_463_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                p_Val2_4_reg_2020 <= p_Val2_4_fu_1422_p2;
                p_Val2_8_reg_2010 <= p_Val2_8_fu_1399_p2;
                tmp_86_reg_2015 <= p_Val2_35_fu_1386_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                p_Val2_6_reg_2000 <= p_Val2_6_fu_1310_p2;
                p_Val2_9_reg_2005 <= p_Val2_9_fu_1323_p2;
                tmp_51_reg_1990 <= p_Val2_3_fu_1269_p2(47 downto 16);
                tmp_53_reg_1995 <= p_Val2_5_fu_1288_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_342 <= grp_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39))) then
                reg_349 <= cells_bin_V_q0;
                reg_353 <= cells_bin_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
                reg_357 <= SVM_detector_V_q0;
                reg_361 <= SVM_detector_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                result_V_reg_2025 <= p_Val2_37_fu_1481_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp1_reg_1712 <= tmp1_fu_486_p2;
                tmp_39_reg_1702 <= tmp_39_fu_475_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp32_V_12_reg_1762 <= tmp32_V_12_fu_618_p1;
                tmp_19_reg_1767 <= tmp_19_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                tmp32_V_1_reg_2036 <= tmp32_V_1_fu_1533_p2;
                tmp_reg_2041 <= tmp_fu_1539_p1;
                tmp_s_reg_2031 <= tmp_s_fu_1505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp32_V_7_reg_1757 <= tmp32_V_7_fu_610_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (tmp_s_reg_2031 = ap_const_lv1_0))) then
                tmp32_V_reg_2046 <= tmp32_V_fu_1543_p1;
                tmp_1_reg_2051 <= tmp_1_fu_1557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (is_neg_reg_1724 = ap_const_lv1_1))) then
                tmp_13_reg_1730 <= tmp_13_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_24_reg_1783 <= grp_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                tmp_47_reg_1970 <= p_Val2_1_fu_1211_p2(47 downto 16);
                tmp_49_reg_1975 <= p_Val2_2_fu_1230_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_426_p2 = ap_const_lv1_0))) then
                tmp_4_reg_1667 <= tmp_4_fu_438_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_379_p2 = ap_const_lv1_0))) then
                tmp_5_reg_1633 <= tmp_5_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                    tmp_72_cast_reg_1959(15 downto 0) <= tmp_72_cast_fu_1192_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                x_reg_1778 <= x_fu_705_p3;
                yn_reg_1772 <= yn_fu_694_p3;
            end if;
        end if;
    end process;
    p_Result_2_reg_1810(53 downto 52) <= "01";
    tmp_42_reg_1893(4 downto 0) <= "00000";
    tmp_77_cast_cast_reg_1898(1 downto 0) <= "00";
    tmp_72_cast_reg_1959(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_379_p2, ap_CS_fsm_state3, exitcond3_fu_426_p2, ap_CS_fsm_state38, exitcond_fu_1116_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_379_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_426_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond_fu_1116_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_768_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_25_fu_748_p1));
        OP2_V_cast_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_80_fu_1076_p3),63));


    SVM_detector_V_address0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state40, tmp_54_fu_1187_p1, tmp_64_fu_1250_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SVM_detector_V_address0 <= tmp_64_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            SVM_detector_V_address0 <= tmp_54_fu_1187_p1(11 - 1 downto 0);
        else 
            SVM_detector_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    SVM_detector_V_address1_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state40, tmp_59_fu_1202_p1, tmp_69_fu_1260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SVM_detector_V_address1 <= tmp_69_fu_1260_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            SVM_detector_V_address1 <= tmp_59_fu_1202_p1(11 - 1 downto 0);
        else 
            SVM_detector_V_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    SVM_detector_V_ce0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            SVM_detector_V_ce0 <= ap_const_logic_1;
        else 
            SVM_detector_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SVM_detector_V_ce1_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            SVM_detector_V_ce1 <= ap_const_logic_1;
        else 
            SVM_detector_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        SVM_index_cast_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SVM_index_reg_1919),16));

    SVM_index_fu_1141_p2 <= std_logic_vector(signed(tmp29_cast_fu_1137_p1) + signed(tmp_42_reg_1893));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cells_bin_V_2 <= 
        ap_const_lv32_0 when (tmp_s_reg_2031(0) = '1') else 
        f_fu_1595_p1;

    cells_bin_V_2_ap_vld_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            cells_bin_V_2_ap_vld <= ap_const_logic_1;
        else 
            cells_bin_V_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cells_bin_V_address0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state38, tmp_84_cast_fu_1151_p1, tmp_86_cast_fu_1179_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            cells_bin_V_address0 <= tmp_86_cast_fu_1179_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            cells_bin_V_address0 <= tmp_84_cast_fu_1151_p1(10 - 1 downto 0);
        else 
            cells_bin_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    cells_bin_V_address1_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state38, tmp_85_cast_fu_1161_p1, tmp_87_cast_fu_1183_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            cells_bin_V_address1 <= tmp_87_cast_fu_1183_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            cells_bin_V_address1 <= tmp_85_cast_fu_1161_p1(10 - 1 downto 0);
        else 
            cells_bin_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    cells_bin_V_ce0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            cells_bin_V_ce0 <= ap_const_logic_1;
        else 
            cells_bin_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cells_bin_V_ce1_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            cells_bin_V_ce1 <= ap_const_logic_1;
        else 
            cells_bin_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cells_mag_sq_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_8_fu_446_p1, tmp_15_fu_458_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cells_mag_sq_V_address0 <= tmp_15_fu_458_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cells_mag_sq_V_address0 <= tmp_8_fu_446_p1(6 - 1 downto 0);
        else 
            cells_mag_sq_V_address0 <= "XXXXXX";
        end if; 
    end process;


    cells_mag_sq_V_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_32_fu_470_p1, tmp_40_fu_481_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cells_mag_sq_V_address1 <= tmp_40_fu_481_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cells_mag_sq_V_address1 <= tmp_32_fu_470_p1(6 - 1 downto 0);
        else 
            cells_mag_sq_V_address1 <= "XXXXXX";
        end if; 
    end process;


    cells_mag_sq_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            cells_mag_sq_V_ce0 <= ap_const_logic_1;
        else 
            cells_mag_sq_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cells_mag_sq_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cells_mag_sq_V_ce1 <= ap_const_logic_1;
        else 
            cells_mag_sq_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_379_p2 <= "1" when (i_reg_292 = ap_const_lv3_7) else "0";
    exitcond3_fu_426_p2 <= "1" when (j_reg_304 = ap_const_lv3_7) else "0";
    exitcond_fu_1116_p2 <= "1" when (k_reg_316 = ap_const_lv4_9) else "0";
    f_3_fu_701_p1 <= p_Result_1_fu_659_p5;
    f_fu_1595_p1 <= p_Result_5_fu_1584_p5;

    grp_fu_332_p0_assign_proc : process(reg_342, yn_reg_1772, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_332_p0 <= reg_342;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_332_p0 <= yn_reg_1772;
        else 
            grp_fu_332_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_332_p1_assign_proc : process(yn_reg_1772, x_reg_1778, tmp_24_reg_1783, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_332_p1 <= tmp_24_reg_1783;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_332_p1 <= x_reg_1778;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_332_p1 <= yn_reg_1772;
        else 
            grp_fu_332_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_336_p0_assign_proc : process(tmp32_V_7_reg_1757, tmp32_V_1_reg_2036, ap_CS_fsm_state10, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_336_p0 <= tmp32_V_1_reg_2036;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_336_p0 <= tmp32_V_7_reg_1757;
        else 
            grp_fu_336_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_385_p2 <= std_logic_vector(unsigned(i_reg_292) + unsigned(ap_const_lv3_1));
    i_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_292),7));
    icmp1_fu_816_p2 <= "1" when (tmp_97_fu_806_p4 = ap_const_lv7_0) else "0";
    icmp_fu_566_p2 <= "1" when (tmp_52_fu_556_p4 = ap_const_lv27_0) else "0";
    ireg_V_fu_712_p1 <= d_assign_fu_339_p1;
    j_1_fu_432_p2 <= std_logic_vector(unsigned(j_reg_304) + unsigned(ap_const_lv3_1));
    k_1_fu_1122_p2 <= std_logic_vector(unsigned(k_reg_316) + unsigned(ap_const_lv4_1));
    man_V_1_fu_762_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_2_fu_758_p1));
    man_V_2_fu_822_p3 <= 
        man_V_1_reg_1815 when (isneg_reg_1788(0) = '1') else 
        p_Result_2_reg_1810;
    msb_idx_fu_551_p2 <= (num_zeros_1_reg_1747 xor ap_const_lv32_3F);
    num_zeros_1_fu_543_p1 <= tmp_14_fu_535_p3(32 - 1 downto 0);
    
    num_zeros_fu_1525_p3_proc : process(p_Result_4_fu_1515_p4)
    begin
        num_zeros_fu_1525_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_4_fu_1515_p4(i) = '1' then
                num_zeros_fu_1525_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    or_cond1_fu_910_p2 <= (sel_tmp8_fu_870_p2 or sel_tmp2_fu_850_p2);
    or_cond2_fu_916_p2 <= (or_cond_fu_904_p2 or or_cond1_fu_910_p2);
    or_cond_fu_904_p2 <= (sel_tmp5_fu_899_p2 or sel_tmp3_fu_882_p2);
    p_Repl2_1_trunc_fu_1571_p2 <= std_logic_vector(unsigned(tmp_2_fu_1563_p2) + unsigned(tmp_9_fu_1568_p1));
    p_Repl2_4_trunc_fu_646_p2 <= std_logic_vector(unsigned(tmp_21_fu_643_p1) + unsigned(tmp_20_fu_638_p2));
    p_Result_1_fu_659_p5 <= (tmp_22_fu_652_p3 & tmp32_V_12_reg_1762(22 downto 0));
    p_Result_2_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_751_p3),54));
    p_Result_3_fu_1547_p4 <= tmp32_V_fu_1543_p1(30 downto 23);
    
    p_Result_4_fu_1515_p4_proc : process(p_Val2_38_fu_1510_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_4_fu_1515_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_38_fu_1510_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_4_fu_1515_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_4_fu_1515_p4_i) := p_Val2_38_fu_1510_p3(32-1-p_Result_4_fu_1515_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_4_fu_1515_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_5_fu_1584_p5 <= (tmp_3_fu_1577_p3 & tmp32_V_reg_2046(22 downto 0));
    p_Result_s_24_fu_622_p4 <= tmp32_V_12_fu_618_p1(30 downto 23);
    
    p_Result_s_fu_525_p4_proc : process(p_Val2_31_fu_520_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable p_Result_s_fu_525_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Val2_31_fu_520_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for p_Result_s_fu_525_p4_i in 0 to 64-1 loop
                v0_cpy(p_Result_s_fu_525_p4_i) := p_Val2_31_fu_520_p3(64-1-p_Result_s_fu_525_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_525_p4 <= resvalue(64-1 downto 0);
    end process;

        p_Val2_10_cast_fu_1428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_reg_2010),64));

        p_Val2_11_cast_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_2020),64));

    p_Val2_1_fu_1211_p0 <= reg_349;
    p_Val2_1_fu_1211_p1 <= OP2_V_cast_reg_1903(31 - 1 downto 0);
    p_Val2_1_fu_1211_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_1211_p0) * signed(p_Val2_1_fu_1211_p1))), 63));
    p_Val2_23_fu_497_p2 <= std_logic_vector(unsigned(tmp1_reg_1712) + unsigned(tmp2_fu_492_p2));
    p_Val2_2_fu_1230_p0 <= reg_353;
    p_Val2_2_fu_1230_p1 <= OP2_V_cast_reg_1903(31 - 1 downto 0);
    p_Val2_2_fu_1230_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_1230_p0) * signed(p_Val2_2_fu_1230_p1))), 63));
    p_Val2_31_fu_520_p3 <= 
        tmp_13_reg_1730 when (is_neg_reg_1724(0) = '1') else 
        p_Val2_23_reg_1717;
    p_Val2_34_fu_1351_p2 <= std_logic_vector(unsigned(tmp_56_fu_1347_p1) + unsigned(tmp_69_cast_fu_1343_p1));
    p_Val2_35_fu_1386_p2 <= std_logic_vector(unsigned(tmp_61_fu_1382_p1) + unsigned(tmp_76_cast_fu_1378_p1));
    p_Val2_36_fu_1446_p2 <= std_logic_vector(unsigned(tmp_66_fu_1442_p1) + unsigned(tmp_82_cast_fu_1438_p1));
    p_Val2_37_fu_1481_p2 <= std_logic_vector(unsigned(tmp_71_fu_1477_p1) + unsigned(tmp_88_cast_fu_1473_p1));
    p_Val2_38_fu_1510_p3 <= 
        tmp_7_reg_1650 when (is_neg_1_reg_1644(0) = '1') else 
        p_Val2_s_fu_160;
    p_Val2_3_fu_1269_p0 <= reg_349;
    p_Val2_3_fu_1269_p1 <= OP2_V_cast_reg_1903(31 - 1 downto 0);
    p_Val2_3_fu_1269_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_1269_p0) * signed(p_Val2_3_fu_1269_p1))), 63));
    p_Val2_4_fu_1422_p0 <= tmp_53_reg_1995;
    p_Val2_4_fu_1422_p1 <= reg_361;
    p_Val2_4_fu_1422_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_4_fu_1422_p0) * signed(p_Val2_4_fu_1422_p1))), 45));
    p_Val2_5_fu_1288_p0 <= reg_353;
    p_Val2_5_fu_1288_p1 <= OP2_V_cast_reg_1903(31 - 1 downto 0);
    p_Val2_5_fu_1288_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_5_fu_1288_p0) * signed(p_Val2_5_fu_1288_p1))), 63));
        p_Val2_6_cast_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_reg_2000),64));

    p_Val2_6_fu_1310_p0 <= tmp_47_reg_1970;
    p_Val2_6_fu_1310_p1 <= reg_357;
    p_Val2_6_fu_1310_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_6_fu_1310_p0) * signed(p_Val2_6_fu_1310_p1))), 45));
    p_Val2_8_fu_1399_p0 <= tmp_51_reg_1990;
    p_Val2_8_fu_1399_p1 <= reg_357;
    p_Val2_8_fu_1399_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_8_fu_1399_p0) * signed(p_Val2_8_fu_1399_p1))), 45));
        p_Val2_9_cast_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_9_reg_2005),64));

    p_Val2_9_fu_1323_p0 <= tmp_49_reg_1975;
    p_Val2_9_fu_1323_p1 <= reg_361;
    p_Val2_9_fu_1323_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_9_fu_1323_p0) * signed(p_Val2_9_fu_1323_p1))), 45));
    p_op_fu_684_p2 <= std_logic_vector(unsigned(ap_const_lv32_5F3759DF) - unsigned(tmp_48_fu_680_p1));
    p_shl1_cast_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_1020_p4),10));
    p_shl2_cast_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_998_p4),10));
    p_shl3_cast_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_976_p4),10));
    p_shl4_cast_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_953_p4),10));
    p_shl_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_391_p3),7));
    p_shl_fu_391_p3 <= (i_reg_292 & ap_const_lv3_0);
    sel_tmp1_fu_845_p2 <= (tmp_27_reg_1804 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_888_p2 <= (tmp_28_reg_1820 or sel_tmp6_demorgan_fu_855_p2);
    sel_tmp2_fu_850_p2 <= (tmp_31_reg_1832 and sel_tmp1_fu_845_p2);
    sel_tmp3_fu_882_p2 <= (sel_tmp_fu_876_p2 and sel_tmp7_fu_865_p2);
    sel_tmp4_fu_893_p2 <= (sel_tmp21_demorgan_fu_888_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_899_p2 <= (sel_tmp4_fu_893_p2 and icmp1_reg_1838);
    sel_tmp6_demorgan_fu_855_p2 <= (tmp_31_reg_1832 or tmp_27_reg_1804);
    sel_tmp6_fu_859_p2 <= (sel_tmp6_demorgan_fu_855_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_865_p2 <= (tmp_28_reg_1820 and sel_tmp6_fu_859_p2);
    sel_tmp8_fu_870_p2 <= (tmp_33_fu_830_p2 and sel_tmp7_fu_865_p2);
    sel_tmp_fu_876_p2 <= (tmp_33_fu_830_p2 xor ap_const_lv1_1);
        sh_amt_cast_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1826),32));

    sh_amt_fu_792_p3 <= 
        tmp_29_fu_780_p2 when (tmp_28_fu_774_p2(0) = '1') else 
        tmp_30_fu_786_p2;
    tmp1_fu_486_p2 <= std_logic_vector(unsigned(cells_mag_sq_V_q1) + unsigned(cells_mag_sq_V_q0));
        tmp29_cast_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_1132_p2),12));

    tmp2_fu_492_p2 <= std_logic_vector(unsigned(cells_mag_sq_V_q1) + unsigned(p_Val2_18_reg_1687));
    tmp32_V_12_fu_618_p1 <= grp_fu_336_p1;
    tmp32_V_1_fu_1533_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_38_fu_1510_p3),to_integer(unsigned('0' & num_zeros_fu_1525_p3(31-1 downto 0)))));
    tmp32_V_3_fu_581_p2 <= std_logic_vector(shift_left(unsigned(tmp32_V_5_fu_572_p1),to_integer(unsigned('0' & tmp_17_fu_575_p2(31-1 downto 0)))));
    tmp32_V_5_fu_572_p1 <= p_Val2_31_reg_1741(32 - 1 downto 0);
    tmp32_V_6_fu_606_p1 <= tmp_91_fu_601_p2(32 - 1 downto 0);
    tmp32_V_7_fu_610_p3 <= 
        tmp32_V_3_fu_581_p2 when (icmp_fu_566_p2(0) = '1') else 
        tmp32_V_6_fu_606_p1;
    tmp32_V_fu_1543_p1 <= grp_fu_336_p1;
    tmp3_fu_1132_p2 <= std_logic_vector(signed(tmp_77_cast_cast_reg_1898) + signed(tmp_89_cast_cast_fu_1128_p1));
    tmp_10_fu_967_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_963_p1) + unsigned(tmp_8_cast_fu_950_p1));
    tmp_11_fu_451_p3 <= (i_1_reg_1624 & j_reg_304);
    tmp_12_fu_515_p2 <= "1" when (p_Val2_23_reg_1717 = ap_const_lv64_0) else "0";
    tmp_13_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(p_Val2_23_reg_1717));
    
    tmp_14_fu_535_p3_proc : process(p_Result_s_fu_525_p4)
    begin
        tmp_14_fu_535_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_s_fu_525_p4(i) = '1' then
                tmp_14_fu_535_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_15_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_451_p3),64));
    tmp_16_fu_976_p4 <= ((i_1_reg_1624 & j_reg_304) & ap_const_lv3_0);
    tmp_17_fu_575_p2 <= std_logic_vector(unsigned(ap_const_lv32_1F) - unsigned(msb_idx_fu_551_p2));
    tmp_18_fu_989_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_985_p1) + unsigned(tmp_37_cast_fu_973_p1));
    tmp_19_fu_632_p2 <= "0" when (p_Result_s_24_fu_622_p4 = ap_const_lv8_9E) else "1";
    tmp_1_fu_1557_p2 <= "0" when (p_Result_3_fu_1547_p4 = ap_const_lv8_9E) else "1";
    tmp_20_fu_638_p2 <= std_logic_vector(signed(ap_const_lv8_9E) - signed(tmp_50_reg_1752));
    tmp_21_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_reg_1767),8));
    tmp_22_fu_652_p3 <= (is_neg_reg_1724 & p_Repl2_4_trunc_fu_646_p2);
    tmp_23_fu_463_p3 <= (i_reg_292 & j_1_reg_1658);
    tmp_25_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_1794),12));
    tmp_26_fu_751_p3 <= (ap_const_lv1_1 & tmp_95_reg_1799);
    tmp_27_fu_742_p2 <= "1" when (tmp_93_fu_716_p1 = ap_const_lv63_0) else "0";
    tmp_28_fu_774_p2 <= "1" when (signed(F2_fu_768_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_29_fu_780_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_fu_768_p2));
    tmp_2_fu_1563_p2 <= std_logic_vector(signed(ap_const_lv8_8E) - signed(tmp_reg_2041));
    tmp_30_fu_786_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_768_p2));
    tmp_31_fu_800_p2 <= "1" when (F2_fu_768_p2 = ap_const_lv12_10) else "0";
    tmp_32_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_463_p3),64));
    tmp_33_fu_830_p2 <= "1" when (unsigned(sh_amt_reg_1826) < unsigned(ap_const_lv12_36)) else "0";
    tmp_34_fu_998_p4 <= ((i_reg_292 & j_1_reg_1658) & ap_const_lv3_0);
    tmp_35_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_827_p1),54));
    tmp_36_fu_839_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_822_p3),to_integer(unsigned('0' & tmp_35_fu_835_p1(31-1 downto 0)))));
    tmp_37_cast_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_1677),10));
    tmp_37_fu_1011_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_1007_p1) + unsigned(tmp_48_cast_fu_995_p1));
    tmp_38_fu_1041_p2 <= std_logic_vector(shift_left(unsigned(tmp_96_fu_1038_p1),to_integer(unsigned('0' & sh_amt_cast_reg_1848(31-1 downto 0)))));
    tmp_39_fu_475_p3 <= (i_1_reg_1624 & j_1_reg_1658);
    tmp_3_fu_1577_p3 <= (is_neg_1_reg_1644 & p_Repl2_1_trunc_fu_1571_p2);
    tmp_40_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_475_p3),64));
    tmp_41_fu_1087_p2 <= std_logic_vector(unsigned(tmp_55_cast_fu_1083_p1) + unsigned(tmp_5_reg_1633));
    tmp_42_fu_1092_p3 <= (tmp_41_fu_1087_p2 & ap_const_lv5_0);
    tmp_43_fu_1100_p3 <= (tmp_41_fu_1087_p2 & ap_const_lv2_0);
    tmp_44_fu_1020_p4 <= ((i_1_reg_1624 & j_1_reg_1658) & ap_const_lv3_0);
    tmp_45_fu_1032_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_1028_p1) + unsigned(tmp_62_cast_fu_1017_p1));
    tmp_46_fu_670_p4 <= p_Result_1_fu_659_p5(31 downto 1);
    tmp_48_cast_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_1692),10));
    tmp_48_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_670_p4),32));
    tmp_4_fu_438_p3 <= (i_reg_292 & j_reg_304);
    tmp_50_fu_547_p1 <= tmp_14_fu_535_p3(8 - 1 downto 0);
    tmp_52_fu_556_p4 <= msb_idx_fu_551_p2(31 downto 5);
    tmp_54_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SVM_index_cast_fu_1176_p1),64));
    tmp_55_cast_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_304),7));
    tmp_55_fu_1335_p3 <= (p_Val2_7_fu_164 & ap_const_lv16_0);
    tmp_56_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_6_cast_fu_1332_p1),65));
    tmp_57_fu_690_p1 <= p_op_fu_684_p2;
    tmp_58_fu_1196_p2 <= std_logic_vector(unsigned(tmp_72_cast_fu_1192_p1) + unsigned(ap_const_lv17_9));
    tmp_59_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_1196_p2),64));
    tmp_5_fu_403_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_399_p1) - unsigned(i_cast_fu_375_p1));
    tmp_60_fu_1370_p3 <= (tmp_85_fu_1360_p4 & ap_const_lv16_0);
    tmp_61_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_9_cast_fu_1357_p1),65));
    tmp_62_cast_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_reg_1702),10));
    tmp_62_fu_587_p1 <= msb_idx_fu_551_p2(6 - 1 downto 0);
    tmp_63_fu_1245_p2 <= std_logic_vector(unsigned(tmp_72_cast_reg_1959) + unsigned(ap_const_lv17_12));
    tmp_64_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_1245_p2),64));
    tmp_65_fu_1431_p3 <= (tmp_86_reg_2015 & ap_const_lv16_0);
    tmp_66_fu_1442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_10_cast_fu_1428_p1),65));
    tmp_67_fu_591_p2 <= std_logic_vector(signed(ap_const_lv6_21) + signed(tmp_62_fu_587_p1));
    tmp_68_fu_1255_p2 <= std_logic_vector(unsigned(tmp_72_cast_reg_1959) + unsigned(ap_const_lv17_1B));
    tmp_69_cast_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_1335_p3),65));
    tmp_69_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_1255_p2),64));
    tmp_6_fu_953_p4 <= ((i_reg_292 & j_reg_304) & ap_const_lv3_0);
    tmp_70_fu_1465_p3 <= (tmp_87_fu_1455_p4 & ap_const_lv16_0);
    tmp_71_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_11_cast_fu_1452_p1),65));
    tmp_72_cast_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SVM_index_cast_fu_1176_p1),17));
    tmp_72_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_591_p2),64));
    tmp_73_fu_1046_p4 <= tmp_38_fu_1041_p2(31 downto 1);
    tmp_74_fu_1056_p3 <= 
        ap_const_lv31_7FFFFFFF when (isneg_reg_1788(0) = '1') else 
        ap_const_lv31_0;
    tmp_75_fu_1063_p3 <= 
        tmp_73_fu_1046_p4 when (sel_tmp5_reg_1853(0) = '1') else 
        tmp_74_fu_1056_p3;
    tmp_76_cast_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_1370_p3),65));
    tmp_76_fu_922_p4 <= tmp_36_fu_839_p2(31 downto 1);
        tmp_77_cast_cast_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_fu_1100_p3),10));

    tmp_77_fu_932_p4 <= man_V_2_fu_822_p3(31 downto 1);
    tmp_78_fu_942_p3 <= 
        tmp_76_fu_922_p4 when (sel_tmp8_fu_870_p2(0) = '1') else 
        tmp_77_fu_932_p4;
    tmp_79_fu_1070_p3 <= 
        tmp_75_fu_1063_p3 when (or_cond_reg_1858(0) = '1') else 
        tmp_78_reg_1868;
    tmp_7_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_s_fu_160));
    tmp_80_fu_1076_p3 <= 
        tmp_79_fu_1070_p3 when (or_cond2_reg_1863(0) = '1') else 
        ap_const_lv31_0;
    tmp_81_fu_1146_p2 <= std_logic_vector(unsigned(tmp_89_cast_cast_fu_1128_p1) + unsigned(tmp_10_reg_1873));
    tmp_82_cast_fu_1438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_1431_p3),65));
    tmp_82_fu_1156_p2 <= std_logic_vector(unsigned(tmp_89_cast_cast_fu_1128_p1) + unsigned(tmp_18_reg_1878));
    tmp_83_fu_1166_p2 <= std_logic_vector(unsigned(tmp_89_cast_cast_fu_1128_p1) + unsigned(tmp_37_reg_1883));
    tmp_84_cast_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_1146_p2),64));
    tmp_84_fu_1171_p2 <= std_logic_vector(unsigned(tmp_89_cast_cast_fu_1128_p1) + unsigned(tmp_45_reg_1888));
    tmp_85_cast_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_1156_p2),64));
    tmp_85_fu_1360_p4 <= p_Val2_34_fu_1351_p2(47 downto 16);
    tmp_86_cast_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_reg_1934),64));
    tmp_87_cast_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_reg_1939),64));
    tmp_87_fu_1455_p4 <= p_Val2_36_fu_1446_p2(47 downto 16);
    tmp_88_cast_fu_1473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_1465_p3),65));
    tmp_89_cast_cast_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_316),10));
    tmp_8_cast_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1667),10));
    tmp_8_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_438_p3),64));
    tmp_91_fu_601_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_31_reg_1741),to_integer(unsigned('0' & tmp_72_fu_597_p1(31-1 downto 0)))));
    tmp_93_fu_716_p1 <= ireg_V_fu_712_p1(63 - 1 downto 0);
    tmp_95_fu_738_p1 <= ireg_V_fu_712_p1(52 - 1 downto 0);
    tmp_96_fu_1038_p1 <= man_V_2_reg_1843(32 - 1 downto 0);
    tmp_97_fu_806_p4 <= sh_amt_fu_792_p3(11 downto 5);
    tmp_9_fu_1568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_2051),8));
    tmp_fu_1539_p1 <= num_zeros_fu_1525_p3(8 - 1 downto 0);
    tmp_s_fu_1505_p2 <= "1" when (p_Val2_s_fu_160 = ap_const_lv32_0) else "0";
    x_fu_705_p3 <= 
        ap_const_lv32_0 when (tmp_12_reg_1735(0) = '1') else 
        f_3_fu_701_p1;
    yn_fu_694_p3 <= 
        ap_const_lv32_5F3759DF when (tmp_12_reg_1735(0) = '1') else 
        tmp_57_fu_690_p1;
end behav;
