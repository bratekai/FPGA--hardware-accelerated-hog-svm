-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    image_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    image_V_ce0 : OUT STD_LOGIC;
    image_V_we0 : OUT STD_LOGIC;
    image_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    image_V_ce1 : OUT STD_LOGIC;
    image_V_we1 : OUT STD_LOGIC;
    image_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_145_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_293 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_117_cast_fu_159_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_117_cast_reg_298 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_i_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_rec_i_fu_169_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_rec_i_reg_306 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_126_fu_194_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_126_reg_311 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_2_i_reg_317 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_3_i_reg_322 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_248_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_327 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_i_reg_105 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_1_rec_i_reg_117 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_i_reg_128 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_118_cast_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_112_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_116_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_fu_175_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_151_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_i_cast_fu_180_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_184_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_i_fu_198_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_111_fu_204_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_i_fu_254_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_113_fu_259_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_fu_272_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_115_fu_277_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_i_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_i_reg_105 <= i_reg_293;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_105 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_i_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_i_reg_128 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_i_reg_128 <= j_reg_327;
            end if; 
        end if;
    end process;

    p_1_rec_i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_1_rec_i_reg_117 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_1_rec_i_reg_117 <= p_rec_i_reg_306;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_293 <= i_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                j_reg_327 <= j_fu_248_p2;
                p_2_i_reg_317 <= in_r_dout(23 downto 16);
                p_3_i_reg_322 <= in_r_dout(31 downto 24);
                tmp_126_reg_311 <= tmp_126_fu_194_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                p_rec_i_reg_306 <= p_rec_i_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_117_cast_reg_298(12 downto 6) <= tmp_117_cast_fu_159_p1(12 downto 6);
            end if;
        end if;
    end process;
    tmp_117_cast_reg_298(5 downto 0) <= "000000";
    tmp_117_cast_reg_298(13) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_163_p2, ap_CS_fsm_state2, exitcond_i_fu_139_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_i_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(in_r_empty_n, exitcond_fu_163_p2)
    begin
                ap_block_state3 <= ((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond_i_fu_139_p2)
    begin
        if (((exitcond_i_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_i_fu_139_p2)
    begin
        if (((exitcond_i_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_163_p2 <= "1" when (p_1_rec_i_reg_117 = ap_const_lv5_10) else "0";
    exitcond_i_fu_139_p2 <= "1" when (i_i_reg_105 = ap_const_lv7_40) else "0";
    i_fu_145_p2 <= std_logic_vector(unsigned(i_i_reg_105) + unsigned(ap_const_lv7_1));

    image_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_118_cast_fu_189_p1, tmp_114_fu_267_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_V_address0 <= tmp_114_fu_267_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_V_address0 <= tmp_118_cast_fu_189_p1(12 - 1 downto 0);
        else 
            image_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    image_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_112_fu_212_p1, tmp_116_fu_285_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_V_address1 <= tmp_116_fu_285_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_V_address1 <= tmp_112_fu_212_p1(12 - 1 downto 0);
        else 
            image_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    image_V_ce0_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_163_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            image_V_ce0 <= ap_const_logic_1;
        else 
            image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_ce1_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_163_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            image_V_ce1 <= ap_const_logic_1;
        else 
            image_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_d0_assign_proc : process(ap_CS_fsm_state3, p_2_i_reg_317, ap_CS_fsm_state4, tmp_125_fu_175_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_V_d0 <= p_2_i_reg_317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_V_d0 <= tmp_125_fu_175_p1;
        else 
            image_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    image_V_d1_assign_proc : process(in_r_dout, ap_CS_fsm_state3, p_3_i_reg_322, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_V_d1 <= p_3_i_reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_V_d1 <= in_r_dout(15 downto 8);
        else 
            image_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    image_V_we0_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_163_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            image_V_we0 <= ap_const_logic_1;
        else 
            image_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_we1_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_163_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            image_V_we1 <= ap_const_logic_1;
        else 
            image_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_blk_n_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_163_p2)
    begin
        if (((exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_r_blk_n <= in_r_empty_n;
        else 
            in_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_read_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_163_p2)
    begin
        if ((not(((exitcond_fu_163_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_r_read <= ap_const_logic_1;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_248_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(j_i_reg_128));
    p_rec_i_fu_169_p2 <= std_logic_vector(unsigned(p_1_rec_i_reg_117) + unsigned(ap_const_lv5_1));
    tmp_111_fu_204_p3 <= (i_i_reg_105 & tmp_4_i_fu_198_p2);
    tmp_112_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_111_fu_204_p3),64));
    tmp_113_fu_259_p3 <= (i_i_reg_105 & tmp_7_i_fu_254_p2);
    tmp_114_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_113_fu_259_p3),64));
    tmp_115_fu_277_p3 <= (i_i_reg_105 & tmp_i_fu_272_p2);
    tmp_116_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_115_fu_277_p3),64));
    tmp_117_cast_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_151_p3),14));
    tmp_118_cast_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_184_p2),64));
    tmp_125_fu_175_p1 <= in_r_dout(8 - 1 downto 0);
    tmp_126_fu_194_p1 <= j_i_reg_128(6 - 1 downto 0);
    tmp_3_i_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_128),14));
    tmp_4_i_fu_198_p2 <= (tmp_126_fu_194_p1 or ap_const_lv6_1);
    tmp_7_i_fu_254_p2 <= (tmp_126_reg_311 or ap_const_lv6_2);
    tmp_fu_151_p3 <= (i_i_reg_105 & ap_const_lv6_0);
    tmp_i_fu_272_p2 <= (tmp_126_reg_311 or ap_const_lv6_3);
    tmp_s_fu_184_p2 <= std_logic_vector(unsigned(tmp_117_cast_reg_298) + unsigned(tmp_3_i_cast_fu_180_p1));
end behav;
