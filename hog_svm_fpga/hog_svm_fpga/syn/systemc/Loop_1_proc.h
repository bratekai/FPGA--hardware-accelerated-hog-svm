// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_1_proc_HH_
#define _Loop_1_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_1_proc : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in_r_dout;
    sc_in< sc_logic > in_r_empty_n;
    sc_out< sc_logic > in_r_read;
    sc_out< sc_lv<12> > image_V_address0;
    sc_out< sc_logic > image_V_ce0;
    sc_out< sc_logic > image_V_we0;
    sc_out< sc_lv<8> > image_V_d0;
    sc_out< sc_lv<12> > image_V_address1;
    sc_out< sc_logic > image_V_ce1;
    sc_out< sc_logic > image_V_we1;
    sc_out< sc_lv<8> > image_V_d1;


    // Module declarations
    Loop_1_proc(sc_module_name name);
    SC_HAS_PROCESS(Loop_1_proc);

    ~Loop_1_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_r_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_163_p2;
    sc_signal< sc_lv<7> > i_fu_145_p2;
    sc_signal< sc_lv<7> > i_reg_293;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<14> > tmp_117_cast_fu_159_p1;
    sc_signal< sc_lv<14> > tmp_117_cast_reg_298;
    sc_signal< sc_lv<1> > exitcond_i_fu_139_p2;
    sc_signal< sc_lv<5> > p_rec_i_fu_169_p2;
    sc_signal< sc_lv<5> > p_rec_i_reg_306;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<6> > tmp_126_fu_194_p1;
    sc_signal< sc_lv<6> > tmp_126_reg_311;
    sc_signal< sc_lv<8> > p_2_i_reg_317;
    sc_signal< sc_lv<8> > p_3_i_reg_322;
    sc_signal< sc_lv<7> > j_fu_248_p2;
    sc_signal< sc_lv<7> > j_reg_327;
    sc_signal< sc_lv<7> > i_i_reg_105;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<5> > p_1_rec_i_reg_117;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<7> > j_i_reg_128;
    sc_signal< sc_lv<64> > tmp_118_cast_fu_189_p1;
    sc_signal< sc_lv<64> > tmp_112_fu_212_p1;
    sc_signal< sc_lv<64> > tmp_114_fu_267_p1;
    sc_signal< sc_lv<64> > tmp_116_fu_285_p1;
    sc_signal< sc_lv<8> > tmp_125_fu_175_p1;
    sc_signal< sc_lv<13> > tmp_fu_151_p3;
    sc_signal< sc_lv<14> > tmp_3_i_cast_fu_180_p1;
    sc_signal< sc_lv<14> > tmp_s_fu_184_p2;
    sc_signal< sc_lv<6> > tmp_4_i_fu_198_p2;
    sc_signal< sc_lv<13> > tmp_111_fu_204_p3;
    sc_signal< sc_lv<6> > tmp_7_i_fu_254_p2;
    sc_signal< sc_lv<13> > tmp_113_fu_259_p3;
    sc_signal< sc_lv<6> > tmp_i_fu_272_p2;
    sc_signal< sc_lv<13> > tmp_115_fu_277_p3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<7> ap_const_lv7_4;
    static const sc_lv<6> ap_const_lv6_2;
    static const sc_lv<6> ap_const_lv6_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond_fu_163_p2();
    void thread_exitcond_i_fu_139_p2();
    void thread_i_fu_145_p2();
    void thread_image_V_address0();
    void thread_image_V_address1();
    void thread_image_V_ce0();
    void thread_image_V_ce1();
    void thread_image_V_d0();
    void thread_image_V_d1();
    void thread_image_V_we0();
    void thread_image_V_we1();
    void thread_in_r_blk_n();
    void thread_in_r_read();
    void thread_j_fu_248_p2();
    void thread_p_rec_i_fu_169_p2();
    void thread_tmp_111_fu_204_p3();
    void thread_tmp_112_fu_212_p1();
    void thread_tmp_113_fu_259_p3();
    void thread_tmp_114_fu_267_p1();
    void thread_tmp_115_fu_277_p3();
    void thread_tmp_116_fu_285_p1();
    void thread_tmp_117_cast_fu_159_p1();
    void thread_tmp_118_cast_fu_189_p1();
    void thread_tmp_125_fu_175_p1();
    void thread_tmp_126_fu_194_p1();
    void thread_tmp_3_i_cast_fu_180_p1();
    void thread_tmp_4_i_fu_198_p2();
    void thread_tmp_7_i_fu_254_p2();
    void thread_tmp_fu_151_p3();
    void thread_tmp_i_fu_272_p2();
    void thread_tmp_s_fu_184_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
