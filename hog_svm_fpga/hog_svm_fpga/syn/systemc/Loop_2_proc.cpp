// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_2_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_2_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_2_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Loop_2_proc::ap_ST_fsm_state1 = "1";
const sc_lv<3> Loop_2_proc::ap_ST_fsm_state2 = "10";
const sc_lv<3> Loop_2_proc::ap_ST_fsm_state3 = "100";
const sc_lv<32> Loop_2_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Loop_2_proc::ap_const_lv32_2 = "10";
const sc_lv<32> Loop_2_proc::ap_const_lv32_1 = "1";
const sc_lv<11> Loop_2_proc::ap_const_lv11_0 = "00000000000";
const sc_lv<11> Loop_2_proc::ap_const_lv11_6E4 = "11011100100";
const sc_lv<11> Loop_2_proc::ap_const_lv11_1 = "1";
const sc_lv<1> Loop_2_proc::ap_const_lv1_1 = "1";
const bool Loop_2_proc::ap_const_boolean_1 = true;

Loop_2_proc::Loop_2_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_61_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_61_p2 );

    SC_METHOD(thread_exitcond_fu_61_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_04_rec_reg_45 );

    SC_METHOD(thread_hog_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_04_rec_cast_fu_56_p1 );

    SC_METHOD(thread_hog_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_i_fu_67_p2);
    sensitive << ( p_04_rec_reg_45 );

    SC_METHOD(thread_out_r_blk_n);
    sensitive << ( out_r_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_r_din);
    sensitive << ( out_r_full_n );
    sensitive << ( hog_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_r_write);
    sensitive << ( out_r_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_p_04_rec_cast_fu_56_p1);
    sensitive << ( p_04_rec_reg_45 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_r_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_61_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_2_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_r_din, "(port)out_r_din");
    sc_trace(mVcdFile, out_r_full_n, "(port)out_r_full_n");
    sc_trace(mVcdFile, out_r_write, "(port)out_r_write");
    sc_trace(mVcdFile, hog_address0, "(port)hog_address0");
    sc_trace(mVcdFile, hog_ce0, "(port)hog_ce0");
    sc_trace(mVcdFile, hog_q0, "(port)hog_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_r_blk_n, "out_r_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_fu_67_p2, "i_fu_67_p2");
    sc_trace(mVcdFile, i_reg_81, "i_reg_81");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_61_p2, "exitcond_fu_61_p2");
    sc_trace(mVcdFile, p_04_rec_reg_45, "p_04_rec_reg_45");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, p_04_rec_cast_fu_56_p1, "p_04_rec_cast_fu_56_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_2_proc::~Loop_2_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_2_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(exitcond_fu_61_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(out_r_full_n.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_04_rec_reg_45 = i_reg_81.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        p_04_rec_reg_45 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_81 = i_fu_67_p2.read();
    }
}

void Loop_2_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_2_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_2_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_2_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_2_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(exitcond_fu_61_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_2_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_2_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_fu_61_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_2_proc::thread_exitcond_fu_61_p2() {
    exitcond_fu_61_p2 = (!p_04_rec_reg_45.read().is_01() || !ap_const_lv11_6E4.is_01())? sc_lv<1>(): sc_lv<1>(p_04_rec_reg_45.read() == ap_const_lv11_6E4);
}

void Loop_2_proc::thread_hog_address0() {
    hog_address0 =  (sc_lv<11>) (p_04_rec_cast_fu_56_p1.read());
}

void Loop_2_proc::thread_hog_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        hog_ce0 = ap_const_logic_1;
    } else {
        hog_ce0 = ap_const_logic_0;
    }
}

void Loop_2_proc::thread_i_fu_67_p2() {
    i_fu_67_p2 = (!p_04_rec_reg_45.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(p_04_rec_reg_45.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void Loop_2_proc::thread_out_r_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        out_r_blk_n = out_r_full_n.read();
    } else {
        out_r_blk_n = ap_const_logic_1;
    }
}

void Loop_2_proc::thread_out_r_din() {
    out_r_din = hog_q0.read();
}

void Loop_2_proc::thread_out_r_write() {
    if ((esl_seteq<1,1,1>(out_r_full_n.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        out_r_write = ap_const_logic_1;
    } else {
        out_r_write = ap_const_logic_0;
    }
}

void Loop_2_proc::thread_p_04_rec_cast_fu_56_p1() {
    p_04_rec_cast_fu_56_p1 = esl_zext<64,11>(p_04_rec_reg_45.read());
}

void Loop_2_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_61_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(out_r_full_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

